(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    764640,      14238]
NotebookOptionsPosition[    755302,      14079]
NotebookOutlinePosition[    755656,      14095]
CellTagsIndexPosition[    755613,      14092]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"dataSet", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"5", ",", "2"}], "]"}], ",", "100000"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mean", "@", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"dataSet", ",", "3"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "100000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data2", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mean", "@", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"dataSet", ",", "6"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "100000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Histogram", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"data1", ",", "data2", ",", "dataSet"}], "}"}], ",", "100"}], 
   "]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.75070373220065*^9, 3.7507037522667437`*^9}, {
  3.7507039776517467`*^9, 3.750703978682461*^9}, {3.7507046084515343`*^9, 
  3.7507046440478287`*^9}, {3.7507046742334557`*^9, 3.750704721884013*^9}, {
  3.7507048763173323`*^9, 3.750704898432301*^9}, {3.750704929629838*^9, 
  3.750704951966745*^9}, {3.750715707681609*^9, 3.7507157411044827`*^9}, {
  3.7507157875773697`*^9, 3.750715814473607*^9}, {3.7507159015546618`*^9, 
  3.7507159302360973`*^9}, {3.750715970975086*^9, 3.750715981850512*^9}, {
  3.750716018991187*^9, 3.750716052071828*^9}},
 CellLabel->
  "In[182]:=",ExpressionUUID->"7f76a40b-82db-47bd-8bbe-6c88509c4e08"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.34299999999999997`], Thickness[Small]}], {{}, 
     {RGBColor[0.97858, 0.678934, 0.157834], Opacity[0.5], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      RectangleBox[{0.2, 0.}, {0.4, 2},
       RoundingRadius->0], RectangleBox[{0.4, 0.}, {0.6, 2},
       RoundingRadius->0], RectangleBox[{0.6, 0.}, {0.8, 10},
       RoundingRadius->0], RectangleBox[{0.8, 0.}, {1., 6},
       RoundingRadius->0], RectangleBox[{1., 0.}, {1.2, 17},
       RoundingRadius->0], RectangleBox[{1.2, 0.}, {1.4, 31},
       RoundingRadius->0], RectangleBox[{1.4, 0.}, {1.6, 58},
       RoundingRadius->0], RectangleBox[{1.6, 0.}, {1.8, 118},
       RoundingRadius->0], RectangleBox[{1.8, 0.}, {2., 175},
       RoundingRadius->0], RectangleBox[{2., 0.}, {2.2, 299},
       RoundingRadius->0], RectangleBox[{2.2, 0.}, {2.4, 416},
       RoundingRadius->0], RectangleBox[{2.4, 0.}, {2.6, 671},
       RoundingRadius->0], RectangleBox[{2.6, 0.}, {2.8, 930},
       RoundingRadius->0], RectangleBox[{2.8, 0.}, {3., 1231},
       RoundingRadius->0], RectangleBox[{3., 0.}, {3.2, 1701},
       RoundingRadius->0], RectangleBox[{3.2, 0.}, {3.4, 2201},
       RoundingRadius->0], RectangleBox[{3.4, 0.}, {3.6, 2954},
       RoundingRadius->0], RectangleBox[{3.6, 0.}, {3.8, 3654},
       RoundingRadius->0], RectangleBox[{3.8, 0.}, {4., 4402},
       RoundingRadius->0], RectangleBox[{4., 0.}, {4.2, 5043},
       RoundingRadius->0], RectangleBox[{4.2, 0.}, {4.4, 5759},
       RoundingRadius->0], RectangleBox[{4.4, 0.}, {4.6, 6224},
       RoundingRadius->0], RectangleBox[{4.6, 0.}, {4.8, 6645},
       RoundingRadius->0], RectangleBox[{4.8, 0.}, {5., 6973},
       RoundingRadius->0], RectangleBox[{5., 0.}, {5.2, 6879},
       RoundingRadius->0], RectangleBox[{5.2, 0.}, {5.4, 6666},
       RoundingRadius->0], RectangleBox[{5.4, 0.}, {5.6, 6302},
       RoundingRadius->0], RectangleBox[{5.6, 0.}, {5.8, 5739},
       RoundingRadius->0], RectangleBox[{5.8, 0.}, {6., 5299},
       RoundingRadius->0], RectangleBox[{6., 0.}, {6.2, 4467},
       RoundingRadius->0], RectangleBox[{6.2, 0.}, {6.4, 3675},
       RoundingRadius->0], RectangleBox[{6.4, 0.}, {6.6, 3023},
       RoundingRadius->0], RectangleBox[{6.6, 0.}, {6.8, 2313},
       RoundingRadius->0], RectangleBox[{6.8, 0.}, {7., 1816},
       RoundingRadius->0], RectangleBox[{7., 0.}, {7.2, 1378},
       RoundingRadius->0], RectangleBox[{7.2, 0.}, {7.4, 978},
       RoundingRadius->0], RectangleBox[{7.4, 0.}, {7.6, 667},
       RoundingRadius->0], RectangleBox[{7.6, 0.}, {7.8, 456},
       RoundingRadius->0], RectangleBox[{7.8, 0.}, {8., 308},
       RoundingRadius->0], RectangleBox[{8., 0.}, {8.2, 202},
       RoundingRadius->0], RectangleBox[{8.2, 0.}, {8.4, 131},
       RoundingRadius->0], RectangleBox[{8.4, 0.}, {8.6, 76},
       RoundingRadius->0], RectangleBox[{8.6, 0.}, {8.8, 34},
       RoundingRadius->0], RectangleBox[{8.8, 0.}, {9., 36},
       RoundingRadius->0], RectangleBox[{9., 0.}, {9.2, 9},
       RoundingRadius->0], RectangleBox[{9.2, 0.}, {9.4, 12},
       RoundingRadius->0], RectangleBox[{9.4, 0.}, {9.6, 7},
       RoundingRadius->0], RectangleBox[{9.6, 0.}, {9.8, 4},
       RoundingRadius->0], RectangleBox[{9.8, 0.}, {10., 1},
       RoundingRadius->0]}, {}, {}}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.5], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      RectangleBox[{1.4, 0.}, {1.6, 2},
       RoundingRadius->0], RectangleBox[{1.6, 0.}, {1.8, 3},
       RoundingRadius->0], RectangleBox[{1.8, 0.}, {2., 11},
       RoundingRadius->0], RectangleBox[{2., 0.}, {2.2, 15},
       RoundingRadius->0], RectangleBox[{2.2, 0.}, {2.4, 53},
       RoundingRadius->0], RectangleBox[{2.4, 0.}, {2.6, 83},
       RoundingRadius->0], RectangleBox[{2.6, 0.}, {2.8, 159},
       RoundingRadius->0], RectangleBox[{2.8, 0.}, {3., 323},
       RoundingRadius->0], RectangleBox[{3., 0.}, {3.2, 624},
       RoundingRadius->0], RectangleBox[{3.2, 0.}, {3.4, 1042},
       RoundingRadius->0], RectangleBox[{3.4, 0.}, {3.6, 1774},
       RoundingRadius->0], RectangleBox[{3.6, 0.}, {3.8, 2660},
       RoundingRadius->0], RectangleBox[{3.8, 0.}, {4., 3894},
       RoundingRadius->0], RectangleBox[{4., 0.}, {4.2, 5246},
       RoundingRadius->0], RectangleBox[{4.2, 0.}, {4.4, 6673},
       RoundingRadius->0], RectangleBox[{4.4, 0.}, {4.6, 8119},
       RoundingRadius->0], RectangleBox[{4.6, 0.}, {4.8, 8962},
       RoundingRadius->0], RectangleBox[{4.8, 0.}, {5., 9757},
       RoundingRadius->0], RectangleBox[{5., 0.}, {5.2, 9734},
       RoundingRadius->0], RectangleBox[{5.2, 0.}, {5.4, 9156},
       RoundingRadius->0], RectangleBox[{5.4, 0.}, {5.6, 8005},
       RoundingRadius->0], RectangleBox[{5.6, 0.}, {5.8, 6964},
       RoundingRadius->0], RectangleBox[{5.8, 0.}, {6., 5433},
       RoundingRadius->0], RectangleBox[{6., 0.}, {6.2, 3989},
       RoundingRadius->0], RectangleBox[{6.2, 0.}, {6.4, 2837},
       RoundingRadius->0], RectangleBox[{6.4, 0.}, {6.6, 1876},
       RoundingRadius->0], RectangleBox[{6.6, 0.}, {6.8, 1173},
       RoundingRadius->0], RectangleBox[{6.8, 0.}, {7., 650},
       RoundingRadius->0], RectangleBox[{7., 0.}, {7.2, 371},
       RoundingRadius->0], RectangleBox[{7.2, 0.}, {7.4, 214},
       RoundingRadius->0], RectangleBox[{7.4, 0.}, {7.6, 114},
       RoundingRadius->0], RectangleBox[{7.6, 0.}, {7.8, 49},
       RoundingRadius->0], RectangleBox[{7.8, 0.}, {8., 23},
       RoundingRadius->0], RectangleBox[{8., 0.}, {8.2, 4},
       RoundingRadius->0], RectangleBox[{8.2, 0.}, {8.4, 6},
       RoundingRadius->0], RectangleBox[{8.4, 0.}, {8.6, 1},
       RoundingRadius->0], RectangleBox[{9.2, 0.}, {9.4, 1},
       RoundingRadius->0]}, {}, {}}, {{}, 
     {RGBColor[0.560181, 0.691569, 0.194885], Opacity[0.5], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      RectangleBox[{-3.2, 0.}, {-3., 3},
       RoundingRadius->0], RectangleBox[{-2.8, 0.}, {-2.6, 2},
       RoundingRadius->0], RectangleBox[{-2.6, 0.}, {-2.4, 1},
       RoundingRadius->0], RectangleBox[{-2.4, 0.}, {-2.2, 3},
       RoundingRadius->0], RectangleBox[{-2.2, 0.}, {-2., 7},
       RoundingRadius->0], RectangleBox[{-2., 0.}, {-1.8, 5},
       RoundingRadius->0], RectangleBox[{-1.8, 0.}, {-1.6, 12},
       RoundingRadius->0], RectangleBox[{-1.6, 0.}, {-1.4, 18},
       RoundingRadius->0], RectangleBox[{-1.4, 0.}, {-1.2, 31},
       RoundingRadius->0], RectangleBox[{-1.2, 0.}, {-1., 28},
       RoundingRadius->0], RectangleBox[{-1., 0.}, {-0.8, 53},
       RoundingRadius->0], RectangleBox[{-0.8, 0.}, {-0.6, 71},
       RoundingRadius->0], RectangleBox[{-0.6, 0.}, {-0.4, 87},
       RoundingRadius->0], RectangleBox[{-0.4, 0.}, {-0.2, 117},
       RoundingRadius->0], RectangleBox[{-0.2, 0.}, {0., 144},
       RoundingRadius->0], RectangleBox[{0., 0.}, {0.2, 192},
       RoundingRadius->0], RectangleBox[{0.2, 0.}, {0.4, 230},
       RoundingRadius->0], RectangleBox[{0.4, 0.}, {0.6, 319},
       RoundingRadius->0], RectangleBox[{0.6, 0.}, {0.8, 429},
       RoundingRadius->0], RectangleBox[{0.8, 0.}, {1., 500},
       RoundingRadius->0], RectangleBox[{1., 0.}, {1.2, 561},
       RoundingRadius->0], RectangleBox[{1.2, 0.}, {1.4, 725},
       RoundingRadius->0], RectangleBox[{1.4, 0.}, {1.6, 828},
       RoundingRadius->0], RectangleBox[{1.6, 0.}, {1.8, 986},
       RoundingRadius->0], RectangleBox[{1.8, 0.}, {2., 1196},
       RoundingRadius->0], RectangleBox[{2., 0.}, {2.2, 1369},
       RoundingRadius->0], RectangleBox[{2.2, 0.}, {2.4, 1595},
       RoundingRadius->0], RectangleBox[{2.4, 0.}, {2.6, 1800},
       RoundingRadius->0], RectangleBox[{2.6, 0.}, {2.8, 2063},
       RoundingRadius->0], RectangleBox[{2.8, 0.}, {3., 2202},
       RoundingRadius->0], RectangleBox[{3., 0.}, {3.2, 2590},
       RoundingRadius->0], RectangleBox[{3.2, 0.}, {3.4, 2772},
       RoundingRadius->0], RectangleBox[{3.4, 0.}, {3.6, 3051},
       RoundingRadius->0], RectangleBox[{3.6, 0.}, {3.8, 3162},
       RoundingRadius->0], RectangleBox[{3.8, 0.}, {4., 3412},
       RoundingRadius->0], RectangleBox[{4., 0.}, {4.2, 3674},
       RoundingRadius->0], RectangleBox[{4.2, 0.}, {4.4, 3766},
       RoundingRadius->0], RectangleBox[{4.4, 0.}, {4.6, 3914},
       RoundingRadius->0], RectangleBox[{4.6, 0.}, {4.8, 3870},
       RoundingRadius->0], RectangleBox[{4.8, 0.}, {5., 3957},
       RoundingRadius->0], RectangleBox[{5., 0.}, {5.2, 4103},
       RoundingRadius->0], RectangleBox[{5.2, 0.}, {5.4, 3999},
       RoundingRadius->0], RectangleBox[{5.4, 0.}, {5.6, 3947},
       RoundingRadius->0], RectangleBox[{5.6, 0.}, {5.8, 3691},
       RoundingRadius->0], RectangleBox[{5.8, 0.}, {6., 3527},
       RoundingRadius->0], RectangleBox[{6., 0.}, {6.2, 3406},
       RoundingRadius->0], RectangleBox[{6.2, 0.}, {6.4, 3225},
       RoundingRadius->0], RectangleBox[{6.4, 0.}, {6.6, 3051},
       RoundingRadius->0], RectangleBox[{6.6, 0.}, {6.8, 2858},
       RoundingRadius->0], RectangleBox[{6.8, 0.}, {7., 2456},
       RoundingRadius->0], RectangleBox[{7., 0.}, {7.2, 2309},
       RoundingRadius->0], RectangleBox[{7.2, 0.}, {7.4, 2069},
       RoundingRadius->0], RectangleBox[{7.4, 0.}, {7.6, 1826},
       RoundingRadius->0], RectangleBox[{7.6, 0.}, {7.8, 1577},
       RoundingRadius->0], RectangleBox[{7.8, 0.}, {8., 1402},
       RoundingRadius->0], RectangleBox[{8., 0.}, {8.2, 1173},
       RoundingRadius->0], RectangleBox[{8.2, 0.}, {8.4, 1078},
       RoundingRadius->0], RectangleBox[{8.4, 0.}, {8.6, 875},
       RoundingRadius->0], RectangleBox[{8.6, 0.}, {8.8, 765},
       RoundingRadius->0], RectangleBox[{8.8, 0.}, {9., 604},
       RoundingRadius->0], RectangleBox[{9., 0.}, {9.2, 480},
       RoundingRadius->0], RectangleBox[{9.2, 0.}, {9.4, 425},
       RoundingRadius->0], RectangleBox[{9.4, 0.}, {9.6, 304},
       RoundingRadius->0], RectangleBox[{9.6, 0.}, {9.8, 243},
       RoundingRadius->0], RectangleBox[{9.8, 0.}, {10., 206},
       RoundingRadius->0], RectangleBox[{10., 0.}, {10.2, 165},
       RoundingRadius->0], RectangleBox[{10.2, 0.}, {10.4, 124},
       RoundingRadius->0], RectangleBox[{10.4, 0.}, {10.6, 97},
       RoundingRadius->0], RectangleBox[{10.6, 0.}, {10.8, 89},
       RoundingRadius->0], RectangleBox[{10.8, 0.}, {11., 47},
       RoundingRadius->0], RectangleBox[{11., 0.}, {11.2, 33},
       RoundingRadius->0], RectangleBox[{11.2, 0.}, {11.4, 32},
       RoundingRadius->0], RectangleBox[{11.4, 0.}, {11.6, 22},
       RoundingRadius->0], RectangleBox[{11.6, 0.}, {11.8, 16},
       RoundingRadius->0], RectangleBox[{11.8, 0.}, {12., 6},
       RoundingRadius->0], RectangleBox[{12., 0.}, {12.2, 9},
       RoundingRadius->0], RectangleBox[{12.2, 0.}, {12.4, 4},
       RoundingRadius->0], RectangleBox[{12.4, 0.}, {12.6, 6},
       RoundingRadius->0], RectangleBox[{12.6, 0.}, {12.8, 2},
       RoundingRadius->0], RectangleBox[{12.8, 0.}, {13., 1},
       RoundingRadius->0], RectangleBox[{13., 0.}, {13.2, 1},
       RoundingRadius->0], RectangleBox[{13.6, 0.}, {13.8, 1},
       RoundingRadius->0], RectangleBox[{14.6, 0.}, {14.8, 1},
       RoundingRadius->
        0]}, {}, {}}}, {{{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {}}, \
{{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {}}, \
{{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.396, 0.},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->NCache[{{
      Rational[-1, 5], 
      Rational[48, 5]}, {All, All}}, {{-0.2, 9.6}, {All, All}}],
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7507046454912033`*^9, {3.7507046796896553`*^9, 3.750704722981353*^9}, {
   3.7507048824739933`*^9, 3.75070490103829*^9}, {3.750704935124876*^9, 
   3.750704954059032*^9}, {3.750715712692855*^9, 3.750715742410884*^9}, {
   3.750715905426881*^9, 3.750715931033847*^9}, {3.750715977675832*^9, 
   3.750715982655835*^9}, {3.750716025492483*^9, 3.750716054149338*^9}},
 CellLabel->
  "Out[185]=",ExpressionUUID->"4c0d43ee-cb15-4655-9499-5c5935d7e0f9"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataSet", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"5", ",", "2"}], "]"}], ",", "100000"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mean", "@", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"dataSet", ",", "3"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "100000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"data1", ",", "data2", ",", "dataSet"}], "}"}], ",", "100"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.75071614727746*^9, 
  3.7507161475928717`*^9}},ExpressionUUID->"b9b8e034-5001-4cce-b600-\
358e38d33c09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RandomVariate", "[", 
        RowBox[{
         RowBox[{"NormalDistribution", "[", 
          RowBox[{"5", ",", "2"}], "]"}], ",", "100000"}], "]"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Mean", "@", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{"dataSet", ",", "sampleSize"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "100000"}], "}"}]}], "]"}]}], "}"}], ",", "100", 
     ",", 
     RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"sampleSize", ",", "2", ",", "15", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.750716094098124*^9, 3.750716105695664*^9}, {
  3.750716159631105*^9, 3.750716201936664*^9}},
 NumberMarks->False,
 CellLabel->
  "In[189]:=",ExpressionUUID->"ab375d51-7517-4815-b1c7-fc1a1ff0d101"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`sampleSize$$ = 15, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`sampleSize$$], 2, 15, 1}}, Typeset`size$$ = {
    360., {107., 112.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`sampleSize$432027$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`sampleSize$$ = 2}, 
      "ControllerVariables" :> {
        Hold[$CellContext`sampleSize$$, $CellContext`sampleSize$432027$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Histogram[{
         RandomVariate[
          NormalDistribution[5, 2], 100000], 
         Table[
          Mean[
           
           RandomChoice[$CellContext`dataSet, $CellContext`sampleSize$$]], \
{$CellContext`i, 100000}]}, 100, PlotTheme -> "Detailed"], 
      "Specifications" :> {{$CellContext`sampleSize$$, 2, 15, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{405., {152., 158.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.750716078782024*^9, 3.750716108535605*^9}, {
  3.750716177245228*^9, 3.7507162049571743`*^9}},
 CellLabel->
  "Out[189]=",ExpressionUUID->"ff2df862-dbc8-4b2c-8326-6d257b0735b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"data2", ",", "50"}], "]"}]], "Input",
 CellChangeTimes->{{3.750715932929255*^9, 3.7507159397574873`*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"7bfb1be5-5732-4e1f-98ea-4e5d3c43c69a"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.189], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.189], Thickness[Small]}], RectangleBox[{1.5, 0}, {1.6, 1.},
      RoundingRadius->0], RectangleBox[{1.6, 0}, {1.7, 4.},
      RoundingRadius->0], RectangleBox[{1.7, 0}, {1.8, 1.},
      RoundingRadius->0], RectangleBox[{1.8, 0}, {1.9, 5.},
      RoundingRadius->0], RectangleBox[{1.9, 0}, {2., 3.},
      RoundingRadius->0], RectangleBox[{2., 0}, {2.1, 12.},
      RoundingRadius->0], RectangleBox[{2.1, 0}, {2.2, 4.},
      RoundingRadius->0], RectangleBox[{2.2, 0}, {2.3, 20.},
      RoundingRadius->0], RectangleBox[{2.3, 0}, {2.4, 22.},
      RoundingRadius->0], RectangleBox[{2.4, 0}, {2.5, 36.},
      RoundingRadius->0], RectangleBox[{2.5, 0}, {2.6, 67.},
      RoundingRadius->0], RectangleBox[{2.6, 0}, {2.7, 78.},
      RoundingRadius->0], RectangleBox[{2.7, 0}, {2.8, 112.},
      RoundingRadius->0], RectangleBox[{2.8, 0}, {2.9, 151.},
      RoundingRadius->0], RectangleBox[{2.9, 0}, {3., 205.},
      RoundingRadius->0], RectangleBox[{3., 0}, {3.1, 288.},
      RoundingRadius->0], RectangleBox[{3.1, 0}, {3.2, 399.},
      RoundingRadius->0], RectangleBox[{3.2, 0}, {3.3, 495.},
      RoundingRadius->0], RectangleBox[{3.3, 0}, {3.4, 621.},
      RoundingRadius->0], RectangleBox[{3.4, 0}, {3.5, 814.},
      RoundingRadius->0], RectangleBox[{3.5, 0}, {3.6, 979.},
      RoundingRadius->0], RectangleBox[{3.6, 0}, {3.7, 1174.},
      RoundingRadius->0], RectangleBox[{3.7, 0}, {3.8, 1510.},
      RoundingRadius->0], RectangleBox[{3.8, 0}, {3.9, 1780.},
      RoundingRadius->0], RectangleBox[{3.9, 0}, {4., 2175.},
      RoundingRadius->0], RectangleBox[{4., 0}, {4.1, 2498.},
      RoundingRadius->0], RectangleBox[{4.1, 0}, {4.2, 2771.},
      RoundingRadius->0], RectangleBox[{4.2, 0}, {4.3, 3220.},
      RoundingRadius->0], RectangleBox[{4.3, 0}, {4.4, 3516.},
      RoundingRadius->0], RectangleBox[{4.4, 0}, {4.5, 3838.},
      RoundingRadius->0], RectangleBox[{4.5, 0}, {4.6, 4163.},
      RoundingRadius->0], RectangleBox[{4.6, 0}, {4.7, 4508.},
      RoundingRadius->0], RectangleBox[{4.7, 0}, {4.8, 4640.},
      RoundingRadius->0], RectangleBox[{4.8, 0}, {4.9, 4754.},
      RoundingRadius->0], RectangleBox[{4.9, 0}, {5., 4793.},
      RoundingRadius->0], RectangleBox[{5., 0}, {5.1, 4855.},
      RoundingRadius->0], RectangleBox[{5.1, 0}, {5.2, 4820.},
      RoundingRadius->0], RectangleBox[{5.2, 0}, {5.3, 4749.},
      RoundingRadius->0], RectangleBox[{5.3, 0}, {5.4, 4515.},
      RoundingRadius->0], RectangleBox[{5.4, 0}, {5.5, 4165.},
      RoundingRadius->0], RectangleBox[{5.5, 0}, {5.6, 3981.},
      RoundingRadius->0], RectangleBox[{5.6, 0}, {5.7, 3625.},
      RoundingRadius->0], RectangleBox[{5.7, 0}, {5.8, 3179.},
      RoundingRadius->0], RectangleBox[{5.8, 0}, {5.9, 2877.},
      RoundingRadius->0], RectangleBox[{5.9, 0}, {6., 2504.},
      RoundingRadius->0], RectangleBox[{6., 0}, {6.1, 2163.},
      RoundingRadius->0], RectangleBox[{6.1, 0}, {6.2, 1832.},
      RoundingRadius->0], RectangleBox[{6.2, 0}, {6.3, 1569.},
      RoundingRadius->0], RectangleBox[{6.3, 0}, {6.4, 1224.},
      RoundingRadius->0], RectangleBox[{6.4, 0}, {6.5, 1022.},
      RoundingRadius->0], RectangleBox[{6.5, 0}, {6.6, 778.},
      RoundingRadius->0], RectangleBox[{6.6, 0}, {6.7, 655.},
      RoundingRadius->0], RectangleBox[{6.7, 0}, {6.8, 480.},
      RoundingRadius->0], RectangleBox[{6.8, 0}, {6.9, 381.},
      RoundingRadius->0], RectangleBox[{6.9, 0}, {7., 260.},
      RoundingRadius->0], RectangleBox[{7., 0}, {7.1, 225.},
      RoundingRadius->0], RectangleBox[{7.1, 0}, {7.2, 154.},
      RoundingRadius->0], RectangleBox[{7.2, 0}, {7.3, 93.},
      RoundingRadius->0], RectangleBox[{7.3, 0}, {7.4, 83.},
      RoundingRadius->0], RectangleBox[{7.4, 0}, {7.5, 44.},
      RoundingRadius->0], RectangleBox[{7.5, 0}, {7.6, 40.},
      RoundingRadius->0], RectangleBox[{7.6, 0}, {7.7, 29.},
      RoundingRadius->0], RectangleBox[{7.7, 0}, {7.8, 16.},
      RoundingRadius->0], RectangleBox[{7.8, 0}, {7.9, 8.},
      RoundingRadius->0], RectangleBox[{7.9, 0}, {8., 5.},
      RoundingRadius->0], RectangleBox[{8., 0}, {8.1, 6.},
      RoundingRadius->0], RectangleBox[{8.1, 0}, {8.2, 1.},
      RoundingRadius->0], RectangleBox[{8.2, 0}, {8.3, 1.},
      RoundingRadius->0], RectangleBox[{8.3, 0}, {8.4, 2.},
      RoundingRadius->0], RectangleBox[{8.4, 0}, {8.5, 1.},
      RoundingRadius->0], RectangleBox[{8.5, 0}, {8.6, 1.},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1.358, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{1.5, 8.6}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7507159404243298`*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"cc23157e-8e3e-4188-90bd-6cf5b862059e"]
}, Open  ]],

Cell[BoxData["Histo"], "Input",
 CellChangeTimes->{{3.7507157499682407`*^9, 
  3.750715750438697*^9}},ExpressionUUID->"b33795d1-9f89-48e4-81ae-\
66962c954509"],

Cell[BoxData["0"], "Input",
 CellChangeTimes->{
  3.750715733230876*^9},ExpressionUUID->"d1fc7f6b-3f13-4673-bb25-\
3fc554985a10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"Histogram", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Total", "@", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"dice", ",", "x"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1000"}], "}"}]}], "]"}], ",", "50"}], "]"}], ",", 
    
    RowBox[{"{", 
     RowBox[{"x", ",", "2", ",", "25", ",", "1"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.750709755659141*^9, 3.7507098525168*^9}, {
   3.7507100585400867`*^9, 3.750710129787651*^9}, {3.750711499196836*^9, 
   3.7507115555784693`*^9}, {3.7507115974076014`*^9, 3.750711598545218*^9}, 
   3.7507140734305468`*^9},
 CellLabel->
  "In[123]:=",ExpressionUUID->"5d8041ad-f608-457c-b91c-d510a65d840a"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = 25, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], 2, 25, 1}}, Typeset`size$$ = {
    360., {111., 115.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`x$307130$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 2}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$307130$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Histogram[
        Table[
         Total[
          RandomChoice[$CellContext`dice, $CellContext`x$$]], {$CellContext`i,
           1000}], 50], "Specifications" :> {{$CellContext`x$$, 2, 25, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{405., {156., 162.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.750714078089644*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"51859679-ddcc-4943-902e-f0480eefee8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.750711609711946*^9, 
  3.750711611372065*^9}},ExpressionUUID->"ed24f7c0-fc60-4727-abad-\
941e88251cca"],

Cell[BoxData[
 TemplateBox[{
  "RandomChoice","array",
   "\"The array dimensions \\!\\(\\*RowBox[{\\\"4.9`\\\"}]\\) given in \
position 2 of \\!\\(\\*RowBox[{\\\"RandomChoice\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \
\\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \\\",\\\", \\\"5\\\", \\\",\\\", \
\\\"6\\\"}], \\\"}\\\"}], \\\",\\\", \\\"4.9`\\\"}], \\\"]\\\"}]\\) should be \
a list of non-negative machine-sized integers giving the dimensions for the \
result.\"",2,123,14,22630674132224157747,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.750711572273603*^9},
 CellLabel->"",ExpressionUUID->"bf8b990d-7e0c-41dc-995c-3bb8da718a68"],

Cell[BoxData[
 TemplateBox[{
  "RandomChoice","array",
   "\"The array dimensions \\!\\(\\*RowBox[{\\\"4.9`\\\"}]\\) given in \
position 2 of \\!\\(\\*RowBox[{\\\"RandomChoice\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \
\\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \\\",\\\", \\\"5\\\", \\\",\\\", \
\\\"6\\\"}], \\\"}\\\"}], \\\",\\\", \\\"4.9`\\\"}], \\\"]\\\"}]\\) should be \
a list of non-negative machine-sized integers giving the dimensions for the \
result.\"",2,123,15,22630674132224157747,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.75071157230684*^9},
 CellLabel->"",ExpressionUUID->"0c2bd802-5f2d-4956-b324-3192bff95fad"],

Cell[BoxData[
 TemplateBox[{
  "RandomChoice","array",
   "\"The array dimensions \\!\\(\\*RowBox[{\\\"4.9`\\\"}]\\) given in \
position 2 of \\!\\(\\*RowBox[{\\\"RandomChoice\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \
\\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \\\",\\\", \\\"5\\\", \\\",\\\", \
\\\"6\\\"}], \\\"}\\\"}], \\\",\\\", \\\"4.9`\\\"}], \\\"]\\\"}]\\) should be \
a list of non-negative machine-sized integers giving the dimensions for the \
result.\"",2,123,16,22630674132224157747,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7507115723721867`*^9},
 CellLabel->"",ExpressionUUID->"f5895f8e-2722-47ca-89cc-ff8655bb2147"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"RandomChoice\\\", \
\\\"::\\\", \\\"array\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,123,17,22630674132224157747,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.750711572398644*^9},
 CellLabel->"",ExpressionUUID->"fc84ceeb-06d2-4264-af85-fdfb9533b169"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dice", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.7507100362963333`*^9, 3.750710042981645*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"4c9b55e5-8e50-449b-8d72-c0c99a31a8be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7507100457194443`*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"b35694d4-744b-4814-bded-92962749b9c0"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataSet", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"GammaDistribution", "[", 
      RowBox[{"5", ",", "2"}], "]"}], ",", "100000"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"normalData", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mean", "@", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"dataSet", ",", "10"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1000000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"normalData", ",", "50"}], "]"}]}], "Input",ExpressionUUID->\
"44296d42-7756-4970-835d-adf29c456f06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", "dataSet", "]"}]], "Input",
 CellChangeTimes->{{3.750704914000964*^9, 3.750704920809155*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"211e4b59-3c82-419c-8b8d-b4120edb7af1"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.49699999999999994`], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.49699999999999994`], Thickness[Small]}], 
     RectangleBox[{0., 0}, {1., 17.},
      RoundingRadius->0], RectangleBox[{1., 0}, {2., 319.},
      RoundingRadius->0], RectangleBox[{2., 0}, {3., 1530.},
      RoundingRadius->0], RectangleBox[{3., 0}, {4., 3611.},
      RoundingRadius->0], RectangleBox[{4., 0}, {5., 5560.},
      RoundingRadius->0], RectangleBox[{5., 0}, {6., 7637.},
      RoundingRadius->0], RectangleBox[{6., 0}, {7., 9056.},
      RoundingRadius->0], RectangleBox[{7., 0}, {8., 9682.},
      RoundingRadius->0], RectangleBox[{8., 0}, {9., 9583.},
      RoundingRadius->0], RectangleBox[{9., 0}, {10., 8969.},
      RoundingRadius->0], RectangleBox[{10., 0}, {11., 8125.},
      RoundingRadius->0], RectangleBox[{11., 0}, {12., 7381.},
      RoundingRadius->0], RectangleBox[{12., 0}, {13., 6045.},
      RoundingRadius->0], RectangleBox[{13., 0}, {14., 5082.},
      RoundingRadius->0], RectangleBox[{14., 0}, {15., 3989.},
      RoundingRadius->0], RectangleBox[{15., 0}, {16., 3355.},
      RoundingRadius->0], RectangleBox[{16., 0}, {17., 2560.},
      RoundingRadius->0], RectangleBox[{17., 0}, {18., 1918.},
      RoundingRadius->0], RectangleBox[{18., 0}, {19., 1527.},
      RoundingRadius->0], RectangleBox[{19., 0}, {20., 1042.},
      RoundingRadius->0], RectangleBox[{20., 0}, {21., 780.},
      RoundingRadius->0], RectangleBox[{21., 0}, {22., 617.},
      RoundingRadius->0], RectangleBox[{22., 0}, {23., 468.},
      RoundingRadius->0], RectangleBox[{23., 0}, {24., 322.},
      RoundingRadius->0], RectangleBox[{24., 0}, {25., 244.},
      RoundingRadius->0], RectangleBox[{25., 0}, {26., 176.},
      RoundingRadius->0], RectangleBox[{26., 0}, {27., 107.},
      RoundingRadius->0], RectangleBox[{27., 0}, {28., 90.},
      RoundingRadius->0], RectangleBox[{28., 0}, {29., 61.},
      RoundingRadius->0], RectangleBox[{29., 0}, {30., 47.},
      RoundingRadius->0], RectangleBox[{30., 0}, {31., 30.},
      RoundingRadius->0], RectangleBox[{31., 0}, {32., 21.},
      RoundingRadius->0], RectangleBox[{32., 0}, {33., 20.},
      RoundingRadius->0], RectangleBox[{33., 0}, {34., 12.},
      RoundingRadius->0], RectangleBox[{34., 0}, {35., 12.},
      RoundingRadius->0], RectangleBox[{35., 0}, {36., 2.},
      RoundingRadius->0], RectangleBox[{36., 0}, {37., 2.},
      RoundingRadius->0], RectangleBox[{38., 0},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.54, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0, 27}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.750704921407855*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"c5dd2e38-158e-4e96-921b-748e14db5805"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.750703814059228*^9, 3.750703817317727*^9}, {
  3.750703914957471*^9, 
  3.7507039754167547`*^9}},ExpressionUUID->"d1eebb71-0e45-4e52-8ad3-\
2e6bd5f6c29c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomVariate", "@", 
  RowBox[{"GammaDistribution", "[", 
   RowBox[{"1", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.750704838417033*^9, 3.7507048646397133`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"776022c6-2e96-4f0a-b8f2-05c5d87d48ad"],

Cell[BoxData["0.238146248499444`"], "Output",
 CellChangeTimes->{{3.750703922274351*^9, 3.750703962854473*^9}, {
  3.750704846786571*^9, 3.7507048650801983`*^9}},
 CellLabel->"Out[55]=",ExpressionUUID->"d11992e9-42be-4f76-b4dc-638181626620"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"LogNormalDistribution", "[", 
      RowBox[{"0", ",", "5"}], "]"}], ",", "100"}], "]"}], ",", "80"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7507035438794107`*^9, 3.750703573186705*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"26b681cf-61c1-441a-a5b6-dfb5ba2ecf2f"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.609], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.609], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{0., 0}, {10000., 97.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{26.208353748162665`, 
          58.212518373346406`}, {-101.7704923022014, 92.06692325995326}}],
        StatusArea[#, 97]& ,
        TagBoxNote->"97"],
       StyleBox["97", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[97, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{10000., 0}, {20000., 1.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{57.712518373346406`, 89.71668299853015}, {
          89.57375402735373, 92.06692325995326}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{110000., 0}, {120000., 1.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{372.7541646251838, 404.7583292503675}, {
          89.57375402735373, 92.06692325995326}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{940000., 0}, {950000., 1.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{2987.599828515434, 3019.603993140618}, {
          89.57375402735373, 92.06692325995326}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-2050., 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0, 102500.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.75070356521417*^9, 3.750703574973939*^9}},
 CellLabel->"Out[26]=",ExpressionUUID->"5f476d61-bcaf-4cab-9908-af484bae8747"]
}, Open  ]],

Cell[BoxData["Poisso"], "Input",
 CellChangeTimes->{{3.750703074082881*^9, 
  3.750703078129675*^9}},ExpressionUUID->"0f44b4ee-3ae1-43f7-8e41-\
163ed22ddeb0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"{", 
   RowBox[{
   "3", ",", "1", ",", "4", ",", "2", ",", "0", ",", "5", ",", "4", ",", "1", 
    ",", "3", ",", "2"}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[3]:=",ExpressionUUID->"4d08c26a-c6e8-4372-897b-874cc92fbf90"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.6649999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.6649999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{0., 0}, {2., 3.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{15.465772618094475`, 
          127.89531625300239`}, {-55.68033092800749, 95.60230332938997}}],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{2., 0}, {4., 4.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{127.39531625300239`, 
          239.8248598879103}, {-105.94120901380666`, 95.60230332938997}}],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{4., 0}, {6., 3.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{239.3248598879103, 
          351.7544035228182}, {-55.68033092800749, 95.60230332938997}}],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.12, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 6.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.750703012234926*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"70885a50-22d4-4d34-a78b-6094a274a397"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"{", 
   RowBox[{
   "3", ",", "1", ",", "4", ",", "2", ",", "0", ",", "5", ",", "4", ",", "1", 
    ",", "3", ",", "2"}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[2]:=",ExpressionUUID->"9b7213eb-4e3c-468f-8ac7-9e006dc598e3"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 3.}, {2., 1.}, {3., 4.}, {4., 2.}, {5., 0.}, {6., 5.}, {
      7., 4.}, {8., 1.}, {9., 3.}, {10., 2.}}]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {0, 5.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.750703001551428*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"8b98e887-9d0f-45de-a604-81f0d5803aca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"PDF", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", "\[Sigma]"}], "]"}], ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Sigma]", ",", 
        RowBox[{"{", 
         RowBox[{".75", ",", "1", ",", "2"}], "}"}]}], "}"}]}], "]"}], "//", 
    "Evaluate"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7507141426958933`*^9, 3.750714163022406*^9}, 
   3.7507154309379663`*^9, {3.7507154715581207`*^9, 3.7507155019099693`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"7da1960c-8d43-4a3b-9d23-057f753409a5"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
xIQ783z4SHvuM9fcbDchPDwypyIZyEs6JHCqomVnMiEo6udy600eklJ0mUGj
ahNhNW8DPr/FTYrRP99h6/SDcOCUDDXLHS7S+4jCzDsHRAHF6krCn7ucpLyN
rewfzoZAWFnB0a3tFtRgI9el0U3Aex876e8/5SKuORmkqmTvB3e/+C4lFnET
vZuZEk74rxA8n4+kOt7jITIU/2SJYmskVD7Vzf6VwksU8lDZ/y4hjnBcLF6e
J56PaFTqbtutdZ6Qk1Isvz+Rn7h7f5g5SBIgTH/+4jBcyk8qF7615SvPSVjo
bx+gquEjPZldN7n3nyYhyvvnafkaXtJmeddpKUI4Qa+w2iOnlYe0l2739eLo
KkKPFJ38vS5uUpzrHWu/e18IM5a533N7uEgOu04o1w/vAo/mRFYfUDhJBw8+
Pe/mrg401qd2mq4UNNwuz6mw/zcOpQtYDtpc5SIWNuTbj7TJAHWhc5xFTtzE
I9JxM6OafwlHGKmVK814iOsEmk8lW+8I9llivXIGvESeMvaoZZl0AkPoX6e8
c3xEw8oisrm6NYEuZ6m8UJOfaLQnsS7eRpxAbXrkxClFftKZs40aCpdlCIs+
AS2nFPhIykpC88dM7QlvFj/J74O8pMEoK6kkhhzC4yvHXZd0eUhsSfRn/Sy6
CFwC37SadblJxYoqPbfDaYClyCtW74tcpLeXLSX2HJIDTJRicaMLnKRTU4Na
u75bgIXYBsvYuXJo7bX3kdPy9vU/R8rnT9+4iFyG3qv1JTxgtjz/vfdnbuKd
1/m8xTWfCZXnaxeE+niIhOCXR16uVBCo67ztG3t5icdPW2YSl4MIjh2C/6La
+YiVjH0g306NoBhtVZXZzU+sp48jJ8QzEhzMADHgenmDr6FdmefKONTXn9Hx
mSqEVsa70tv+jkOaD9J2//7FNdRaPD78dvv1FEUNfpqs8RPXNOT0K3WoCem+
2T96+0Pg7D9xHyL9BJwXe/u18dmjBosd15jbf4/Dkn1U1zkOPoAPH9W/F6Ca
gK3t1gvavrcbPnIfKvpAOwH7g+1dI83uwumz1TdubD8uavkr+10+v4FpfV0z
Z/vjVwTEp1oE/RuqLqTImW4/v+A+L/X23/xECYNQS7mKLRXkPfJSC98IFzgB
kPeosGkUc4n7EkDeY4IUc5/xjQCAvEeZXAdLzo/3APIezZrX7zXVVALkPWYt
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
RoGo52Tlo3bz8KZA1FtSW/93+bwPBfeW7FbPmOpDKbi3/Gt0drR4+/lQbzkX
UdTPJKgCUG/pStrxZOf2+QPqLb8ZnWVk274eQb3lW822yfLt6xnUW5p0lnj0
b19Pod7SlE/8Q/L2Y9RbEoUtUkW2rw9Rb6lQ66oosv38qLf8p2fQda/hBOrL
SC1UL0v2H7SGqLcMPiNp2fzYEaLe0pBzvVrP1h2i3rLk2TKrupkfRL2lguhi
B51IKES9ZU/VBuOKbTREvWXH91J+975EiHrLr633A1O803BvOX35U0LMvQzc
WzJ42N5PrruPe8vZf1IGzQcLcG/pqX35TdjyI9xbNjyrSxSDJbi3vLu7qPm/
vnLcW9J97WJu5qvCveVIUWvd/Y81uLdMTj8Rca+8DveWdwwjJbuKSbi35E2m
22Vy+w3uLel7TpSInv1fb3mCe0eq22oL7i0TPiomXLjQhnvLfUYfnNPN2nFv
KSNhsH53Hxn3lkEkOpOcQDLuLT+aajAXB5Fxb5n2h1FsTZCMe8ua1qemEnbt
uLekSzrXJKvehntLYbk11Z0TLbi3LP5Nrs4w/V9v+cbAvvBa7BvcW1LtSWz4
/pqEe0v9kdeEgPE63FuGTzgqRFLX4t5S+dlbhfDIKtxbrtJGeh/fKMe9ZYX7
pxJhSgnuLe/1KIx7ez3GvaVc2F3JFN0C3FuWKYcxiorn4d6yKcrq5KEXGbi3
ZGL/Y8ubkIZ7Sx1aswTDV7cg6i2zR6OF2NKjIeot9853Pdv9IBSi3lKE8/g1
84P+EPWWpFDnttZsd4h6yyvukpn8NU4Q9Zbo5wH1locqf9F75dpB1FsSNfZJ
87x1hai3tFQ0+JWf7wVRb6kqNpaoFxMEUW/5l7bGho8jAqLeMmuyd1Bq9iZE
vaV7S0Aex7tkiHrLf9SLCgyWd3Fv6Xn9Sb3J52wYWi4fyya91CD3Rbzi0LNW
3DdaTdRx5E224b7xd8xZg1dv23HfGGeQubR0kYz7RsUH6oWqMWTcN+rJ1Qrv
2f5z1DeuH3Fb9tv++6hvHEqVv7Bjog2afy/9VH5zCTLZzWe2ZrXintBSfw/H
W6Mc3BMu6axfCfK7i3tC373Vwzl8KRD1hNVPZxf8rsZB1BMeyjl5/7NbBEQ9
Ybqeq+G4czBEPWGwZsJlvt3eEPWE33XFsoTS3SDqCf0ZD8cVcF2BqCeMzPP6
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
SaL6//5D9zf/r8f/z3/+fwBXvZBI
    "], {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1: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
E11U1gP/hsfT7fT05f8PwLmMkQ==
         "]]]}, {}, 
      {RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwV1WUUVUUUQOFHlx1gg0E3Iind3SVdEtLd3YigdIeBUrY0AkqDYgA2KqiE
pCgNfufHXnf2PsNCeTP3Ptmme91uSROJRBLMTZZIZEqRSBROm0gUQR3rT1In
EidTJRJrPJ/x/A1vWXdImUhcxSd8MD9k7xPWP2IJz2W2BYN5aT7M/EnrX/A6
r2F2FAt4a77SPJ31bkzhSc1moA5Pz2ubv8iv4GNtkPat9rj1D1jMc5ptxiBe
ig81r85/wXytlbZCS2u9Cy/zJGbTUZs/yGuZt+eX8ZE2UPtGe8z6eyziOcw2
YSAvyYeYV+M/Y57WUntHS2O9E5N5wuw11OIP8Jrm7fh/+FAboH2tPWr9HRby
7GYbMYCX4IPNq/KfMFdrob2tpbbegUn8Nn/VvCa/P/6deVv+Lz7Q+mtfaY9Y
H8ECns1sA/rz5/kg8yr8R8zRmmvLtVTWn2Miv8Wnmdfg9/HqvA2/hPe1ftpB
7WHrw5jPs5qtRz9enA80r8x/wGytmfaWltL6M0zgN/lU8+r8Xl6Nt+b/4D2t
r/al9pD1IczjWczWoS8vxgeYV+LfY5bWVHtTS2G9HeP5Df6KeTV+D6/KW/GL
eFfro32hZbD+FnN5ZrO16MOL8v7mFfl3mKm9oL2hJbfehnH8Op9iXpXfzavw
lvwC1mi9tQNaeutvMCfuXdwz9OZFeD/zCvxI3BGtifa6dg0va1W0u7TKvAU/
j9VaL22/9nTcIfTSCmt9tfL8cNwFrbG2TLuKyVpl7U6tEm/Oz2GV1lPbpz0V
dwU9tUJaH60cPxRnXmukLdWuYJJWSbtDq8ib8bNYqfXQ9sZ7Iu4EemjPab21
svxbvKo11JZolzFRq6il0yrwPcgUZx3d9YJ6L60M/wbTtAbaYu0/TNAqaGm1
8nw3MsYZRjf9Wb2nVpp/jalafW2R9i/Ga+W1NFo5viveg3E20VUvoPfQSvGv
8IpWT1uoXcI4rZyWWivLd8Y7Lc4cuuj59e7aAvyDsXpZPZVehu+Id1OcHbyk
59O7afNxEWP0MnpKvTT/PN4xcR7QWc+rd9Xm4QJG66X1FHop/lm8K+L3Ric9
j95Fm4vzGKWX0pPrJXkJPI+XMAfnMNKekvYks6c43x7vhfjN0VHPrXfWZuMs
Rugl9KR6Md6Un8EKrbu2Le57ODpoubROWkl+EFO0utosLZn1VozlZ/hw8+d5
El407oL1r3iTv2D2h/UK67+t37HuZr3Vvr+sV1k/6Pl+vKs9Z3tmiLPqeYy/
He/9+O08X+Q5PTv6sx97nuCrPTN5fuD5s+cyzxJxdzyP83fiXRZnx/NlXsdz
pj//p/XK+CZ6foox8d+n/269PL6t/kxx64R1kbiP1kfxBm9idhpv8678U/MH
rL/CLJ4+ZmjPc8R3PX4//gUma7W1GdppDNWKabfjvcG34EFtOdpp2eP/W5uO
UxiiF9VvxXuBb46/W3sLbbVs9rfXXsNJDNaL6Dfj3vOCeDa+k/FNwwkMsqew
+Y24W/Fti+9Q/D4YaFZIvx73hm/C/dqbaKNl9fe1ie9J/JtigP6cfi3uDd+I
+7Q30FrLYn/r+C7gD/TXC+pX497wDbhXex2ttMz2t9KK8wOYpNXSpmjH0U97
VrsS94ivxz3aMrTUnrG3pVaM78dErWacBe0Y+moFtMtxZ/g63K0tRQvtaXtb
aEX5PkzQamiT46ygj5Zf+y/uDF+Lu7QlaK49ZW9zrQjfi/FadW2S9ht6a/m0
f+Ns88b8VPz+vIt9n2h38sVopj2pNdMK8z0Yp1XTJmq/opeWV7sUZ4834ifj
fPCX7PtYu4MvQlMtk9ZUK8R3Y6xWVZugHUVPLY/2T5xF3pCfiN+fd7bvIy0d
X4gXtIxx57Xn+C6M0apo47Vf0EPLrV2Ms8ob8L/ifPBO9n0Y58v6IGbytGYL
0IQ/EXcvzjDfidFaZW2clsR6C0bHe4B3N8/FL8QZ5fX5n3GueEd7Pohzaf0l
ZvA0ZvPRmD/OG8c94TswSqukjdUS1psxiv/Eu5nn5OfjbPN68b6L88c72PN+
nGfrLzCdpzabh0b8Md7IvAD/HCO1itoY7TbfxEfyH3lXnoOfizvB6/LjcU75
i/a8F+fe+gBe46nM5qIhf5Q3NM/PP8MIrYI2WrvFN/IR/AfehWfnZ+Pu8Dr8
WJxn3t6ed+N+WO/Hqzyl2Rw04I/wBub5+HYM18pro7SbfAMfzr+PbxnPxs/E
HeO1+e9xznk7e9bEPbLeh2k8hdls1OcP8/rmefk2DNPKaSO1G3w9H8a/4515
Vv533EVei/8W55+3tWd13C/rvZjKk5vNQj3+EK9nntH6Jyzlecy2Yigvy0eY
X+fr+FB+hHfiWfjpuK+8Jv817ghvY8+quIPWe/AKT2Y2E3V5Bl7XPDf/FEO0
Mtpw7Rpfy4fww7wjz8xP4X9Ry9eZ
         "]]]}, {}, 
      {RGBColor[0.560181, 0.691569, 0.194885], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwV0mWYFQUUBuDZpXaX7lBi6Q5pQVDBBKVDSkWQTkVpMEAUQUFBQpDuBunu
7u6W7k7f+fHe78x3z9x5Zu7ENm5XvW1kEAQR9PaxKCoIiscEQQkumYvJ/6KD
IL8cJ0+R3dxUjuAQrzouLBsymF2k0sWRmahEb1YQGf6e3y1kbsAgdpJSHykz
8iG9WE6E/qL9gub6/M4OUugjwmvzAT1ZRqC/YL+AuR6/sZ3k+kC+wvv0YCkv
OW8/v/yEgWwjmf2X+gzm9+jOEl5wTp9P1mUAW0lq/4U+vfldurGY55zVPyed
+R26sohnnNE/I625Il1YyFNO65+SxlyBzvzLk/B/0J/kBMc5xlGOcJhDHOQA
+3lCaue9zbcs4DH79I9JZX6Lb5jPI/bq88o6/MoWkrjPR/qU5jfpxDweskff
RA7nYPis7eaRtenPZhLrHtr73Dw0vD7pdCnk3xwJ3xnH5eXXzOUBu50zVp4k
m++/CP8HcpuHyQNkMOeWF8hrHi0LyWMyi6wli8gzMqf8RRaQm2Qi+cA1iobv
m+N88h9ZWB6XsfIz+Zo8K3PJIbKg3CvTyuThu0Qe80h5OHyfzeXC/5Ic5q/k
HO6zy/XGyBNk9V1j+Rf7Se84lxzFUTI7ril/ZiMJHd93/qfmP8NnTxpdMvkG
HZnNPXbayylr0I8NxNi9p29k/iN8vqTWJZVl6cAs7rLDXg5ZnZ9YT7Tdu/ok
5jK0ZyZ32K7PLqvRl3VE2b+jT2x+nXbM4Dbb9FvZwmY2sZENrGcda1nDam6T
yHmlact0brFKf4uE5lK0YRo3Wam/SYy5JK2Zyg1W6G8QbS5BK6ZwneX6bLIq
fVhLAvdyXR9lLk5LJnONZfqssgo/sob49q/pE5iL0YJJXGWpPlZ+zA+sJp79
q/r45qI0ZyJXWKLPIj/i+/CeiWv/ij5e+H7SjAlcZrE+s6zMd+FzII79y/q4
5iJ8yXgu8T96Y9Nl
         
         "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, 
      TagBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwl2Af4luMbxvFfe2pPIUVp7z210KSoaKFBStoqbWVLWtpbZUSUBu2prNJQ
aO+9d+H/uY7/cbi85/c8r+c53t77fq77qTxtuzZ5LVFCQkLuZAkJ8flG4oSE
l4iPkiQkrMLdkyYk5KXT8dvifPgPep2em/QXsnvpb+gX6Yay0vpu0p/T42Sn
ZVPwOf7HdA26qGwUboj/pU/rS+47LJPVpDfx+9DtZP5L+InuT7ws2ycbiVfz
e9AP0ell7XB+vJter+8W/aUsF/0t3ZZuJCuj7xb9Bf2J7IxsKj7PH0XXpIvJ
RuNG+D/6jL4Uvt/3slr0j/y+dHuZj4Sf/W8A3VG2X/YxXsPvST9MZ5C1x4/g
PfQGfbfp+bL76IV0O/pJWVl9t+kv6fGys7Jp+AJ/NF2LLi4bg5/E8QXO6kvp
+/1A16Y38/vRHfRFyy/0QPoV2QHGKLyW34vOR2eUdcAF8J/0Rn136K9k99OL
6Pb0U7Jy+u7Q8+kJsnOy6fgifwxdmy4hG4ufwoli7fWl8v2W03XoLfw36Jf0
sRN+pQfRnWQHZaPxOn5vOj+dKfYlLoj/ojfpu0t/LXuA/o7uQDeWldd3l/6K
nig7L5uBL/HH0nXokrE3cWOcONZeX2pfZAX9GP0Tvz/9sr7k+n6jB9OdZYdk
Y/B6/uv0I3Tm2Ju4EP6b/lHfP/QCWW56Mf0S3URWQd8/9Nf0JNkF2Ux8mT+O
fowuFXsTN8FJYu31pfH9VtKP0z/zB9Ad9aXQt5UeQr8qOywbizfw+9AF6Cyx
N3FhvJferO9f+hvZg/QS+mX6aVlFff/SC+jJsouyWfgK/xP6cbp07E38NE4a
a68vre+3in6C/oU/kH5FX0p92+ihdBfZRtxXXpCXNfYkLoL30VvkedRS3FH+
DK+S/D/6G3qK7CoeL3+CVyb2IH4GJ4s1ltdVv+JBuJM8lfx3+k06ht0m3E9e
iJct9hwuivfTP8nzqmX4FXlTXmV5PETf0lNl1+AEXFdeNvYYboqTxxrK66nf
8GDcWZ5avp0eRneN2RFzVl6Ylz32FC6GD9A/yx9S3+NO8ma8KvJEeCE9TXYd
T8T15OViD+FmOEWskby+2oqH4FflaeQ76OF0t5gNuL+8CC9H7BlcHB+kf5E/
rKryEvMW8abjG3gSru+a8rEvcHOcEl+VN4j15+3Eb8m7xzOOB+gpyssZa49L
4EP0r/J8qlqML953vBlxpuDJuIFrKsR642dxKnxN3lDdw9uF35b3iGcVD9RT
LM6iWGNcEh+mf5PnV9VjCXmLeTPjbMBTcEPXVIx1xc/h1Pi6vJFKx/sDvyPv
Gc8cHqSneJwpsZa4FD5Cb5U/oh7lJeMt4c2KGY+n4kauqRTrh1vgNPiG/EmV
nrcbvyvvFc8OHqynRJwNsWa4ND5Kb5MXUDV4yXlLebNjVuNp+EnXVI41wy1x
WnxT/pTKwNuD35P3jmckzndVRt8x3u+8gqomLwVvGe/TmLN4hmrFu8f1t3iN
VUben/h9fa/Hno/zWJXVd5y3nVdI1eKl5H3PmxNzEc9UmdRfrv+A3yf2bJyX
qpzeE7wdvMKqNi8V7wfe3JhbeJbKrP52/Yf8vvxtcZ6pOiq1/uX8efz/8GyV
Re3VP4Lfj/97nC/qMZVG/wr+Z/ESpD71kVXt0/8R/w3e9pj36nGVTWVX++Uj
5f3lO2LeqidUWvdbyf+cn0jN4eVQB/R/zB/A2xlzUJXXe5K3k1ck5hfvHt4q
3hc4sZqOn3JtlfgN5K1xOnxb1iT+7Hgo7iLPKT9Ij6IHyo7IxuFd/CF0yTjT
ZVnM6010P34F/qm4lrcrfrOYd9GHi+IfcOfY97i5vmw+N8fZ67Oe69PJV/Nz
4C/1X8KzY//iJHgGbhzPJ66qL6vPH/E817aRpafvxLPNXx3nUKwP/036Nf33
6jtEj6YHyf7AQ+Wl4jvE+uCK+DT9h7xYzEFeet4a3nycVH3Ge56XwXV38TMq
F+8wHqNvMN4d81E1UPep+9UR+Vj5EPmemGuqocrgXmv5X/GTqc95D6ij+sfx
h/L+jPmkGqmM+tfxv+YnV1/wcqtj+j/hv8n7K+aMqqT3DG83r3jMinhmeOt5
C3AK9SXvQXXc9eP5w3h/x/xQlfWe5e3hlYgZEM8MbwPvG5xSzeflUSdcP4E/
nLc39omqovcc709eyXjm4xnibeR9i1Opr3gv8DK6/h/cNM5P3kk8Ud9beF+s
laqq7zzvL16p2LfxjPE28Rbi1Opr3ou8TK7/FzeL85B3Ck/S9zbej99U1fRd
4P3NK62ejueS9yNvEU6jZuImrq0Wv5m8Lc6M/5M1j7OOdxpPlr+DD8S99ZSO
97b4PXF1fJHeKy8Teyaefd5m3ndx7qlZ+GnXVI/fVt4OZ8Hxl5dn46wjz+Ap
+F18EA/TUybev+J3x4/iS/Q+edn4LWNm8LbwFsezoWbjZ1zzaKyBvD3OihPh
5+Ks453FU/F7+BAerqcsL0+sB66BL9P75eXiN+bl5P3EWxLnXsw/3NQ1NWJt
5B1wNpwYt4izjncOT8Pv48P4LT3leHljnXBNfIU+IC+vluNX5c/ymsvvxT/T
S+MMjBmJm8lrxvrJX8LZcRLcMuYvHoa74gLy8/R0+oOYcfhteXneQ7GWuBa+
Sh+UV1ArcBf5c7Em8lz4F3pZnI1qLm4urxXrKn8Z58BJcauY73g47oYLyi/Q
M+gPZUfxO/IKvIdjjXFtfI0+JK+oVuLX5C1irWK24F/p7+MsVfPws/Lasd7y
jjgnToZbx3mB38LdcSH5RXomPUJ2DL8rr8jLF2sf5yC+Th+WV1KrcFd5y1jD
mGv4N/oHWaaYjfg5eZ3YB/JX8L04OW4j34Xfxj1wYfklehb9kew4fk9eiZc/
9kScq/gGfUReWa3G3eStYj1jTuKt9HJZ5piduIX8sdgT8k44F06Bn4+Zj9/B
PXER+WV6Nj0yfn/ZJ/gE/326Mv1I7I04r/FN+mic7c6XhXGO0mv43enWsb4x
h/E2eoXsMv2pLEvMaLol/XjsFX2d8X04JU7nfmvoF+Lc4L9L9+IX1XeF/pT+
ONZHNh6f5H9AV6ELxN6J9wV8iz4W7wrut0hWlV7L70G3ifWPOY9/p1fKrtBz
ZFnjDKBb0U/EXtL3Kr4fp8Lp3W8t/WKcW/z36N78Yvqu0nPoUbF+sgn4FP9D
uipdMPYWrotv08fjXcT9vot5Sq/j96Sfj/0R5wjeTq+SXaXnyrLFGUO3puvG
XtPXBT+AU+MM7reObhvnJP99+nV+cX3X6Ln0aNkJ2UR8mj+CrkYXir2H6+E7
9Al9Sdxvccxhej2/V6xN7B99efEOerXsGj1Plj3OMLoNXS/2or7XcG6cBmd0
v/V0uziX+R/Qffgl9F2P9xd6jOykbBI+w/+Irk4Xjr2J6+O79Ml4B3G/JTG/
6Q383rE2shf0PYR30mtk1+nPZDniTKSfp+vH3tTXFT+I0+JM7reBbh/nPv9D
ui+/pL4b9Gf0WNkp2WR8lj+SfpQuEnsz3nPwP/SpeIdxv6Ux9+mN/NdjbWQv
6nsY76LXym7Qn8ty0gvoF+gGsTf1dcN58D04s/ttpDvEewV/BN2Pn52/Jcn/
/92xlGv+B1SOjAY=
         "]]},
       Annotation[#, "Charting`Private`Tag$418429#1"]& ], 
      TagBox[
       {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwV1XfYjmUYgPHXJlSi7L0JlcyULXuLJEJZ2XtmZu+9ZxRpZ0SUjBTtQVYo
O6NCi+p3/XEez3We9/0dPs/73febt0Ovpj2TJBKJBckSiTwpEomLqRKJguiS
MpH4ng9PnUhs4X/zkbwqH84/4CXQVMusNdXm8WSYzj/h6bDRege+zHzSWkPk
1S7xQujKD/ER9mzl//BRvBofwT/kJbGKH+O50cx6Ft7MPN9acszgn/L0eM16
R77cfMpaI+TTfuGF0Y0f5i/Y8x6/xUfz6vwFvouXQnMtq9ZcW8BTYCY/wO/E
69af5SvMp601Rn7tMi+C5/kPfKQ92/htPobX4CP5R/wBtNCyaS20hTwlZvGD
/C68Yf05vtL8k7UmKKBd4UXRnR/ho+zZzv/lY3lNPorv5g/iCS279oS2iKfC
bP4ZvxtvWu/EV5l/js8WBbWrvBh68KN8tD3v8//4OF6Lj+Z7+ENoqeXQWmqL
eWrM4Z/zDHjLeme+2nzGWjMU0q7x4ujJj/Ex9uzgCbzIH+djzHutl0YrLafW
SlvC02Au/4Lfg7etd+FrzGfj80Rh7Vd+P3rx43ysPTt5EozntflY8z7rD+NJ
LZf2pLaU34F5/EueEe9Y78pfMp+LzxNFtN94CfTmJ/gE1LFvnPaxVgattdxa
a20ZT4t3tW7aWu18fG4oqv3OS6IP/5FPRF37XtT2a2XxlJZHe0pbztNhk/a8
tk67EJ8PimnXeSn05Sf5JNSzb7z2iVYObbS8WhttBU+PzVp37WXtYnwOKK7d
4A+gHz/FJ6O+fRO0T7XyeFrLpz2treR3Yot2P25qD6K/dppPQQN7J2oHtApo
q+XX2mqr+F3YqpXAH9pDGKD9xKeiob2TtINaRbTTCmjttNX8brynlcSfWmkM
1H7m09DI3snaZ9ojeEYrqD2jreEZsE0rhb+0hzFIO8Onoz0K2d9ef0m/B9u1
B/C3VgaDtbN8RtyVKGx/B32tnhHvaw/iH60shmjn+My45/AQbunlMNTaeT4r
7iaUxsMog9vWy2OYPRf47LhXUMS/11Ffp2fCDq0s/tUqYLh2kc+J+wFF7X9W
f1m/Fzu1cvhPq4gR2iU+F43tnaJ9rlVCZ62Y9pz2Cr8P8/lXPFN8r1jvwV8x
X4qzh5f4jzxf/P7WE/wR8wvWXjafNv+ijzN/YE6KV81n4ztJb2KeGvdb3A1+
Zr3nz/xdz0f5as/jcV945onvD8/znps8u/j54p6d4h72XG//K54/xbn3zMwX
eH4d95rnvZ4bPc/Fd5ef7Rk/E7+ffRvMZ8ytzWvNJ8354x3bl4RXMo+0dpm/
yD/kyTCfN+XTzF9afwxd48xonbUNPAt2ab20DdrluAvib15LGv9PbRS/whfE
/RJnJv5/8a70rPhIewTJ9Mf00dpVvjDuD1TCo3gMye2pbM8Ye67xRXEnxDnS
u8Y70LNht1YZKfQq+ljtV744Puc4N3q3eOd6duzRqiClXlUfp/3Gl8S7jHOj
P6+/rufAXq0qUunV4ntC+50vjXcR50bvHp+dnhP7tGpIrVeP+167zpehmTZd
+0qrjN5xtrQe8bfDc+FjrTrS6DX0CdoNvhzNtRna11oV9Inzp/WMvw2eG/u1
GrhDr6lP1G7yFWihzdS+0aqib5xdrVf8bfI8+ESribR6LX2S9gdfiSe0Wdq3
WjX0i3Ov9Y6/VZ4Xn2q9tVe1K3G/o5aWTntcm8z/5KvQUputfadVR/+4F7Q+
cXZ4PhzQ+mgbtatxv+NxLb1WW5vC/+Kr0Uqbo32v1cCAuDe0vnHWeH4c1Ppq
r2nX4r5Hbe1OrY42lf/N1+BJba52SKuJgVp5rZ+2mRfAQv4Nvy/ucOv9+Ovm
X+O7AHW0u7S62jT+Dx/Pd/HkcWfz1nye+XC8KwzSKmj9tS28IBbxb3nmuOus
9+dvmH+L7wzU1e7W6mnT+S0+gX/EU8Rdz5/i880/xDvEYK2iNkDbygthMf+O
Z8EX1gfwN82/W2uPeloGrb42g9/mE/lunjLueN6GLzAfiXeLIXHutYHae7ww
lvDveda4c6wP5G+Zr1vrgPraPVoDbSb/l0/ie3iq+G7gT/OF5qPxnjE07hBt
kLaNF8FSfohni3NnfRB/23zDWkc00DJqDbVZ/D8+me/lqeM7hLfli8zH4j1j
WNxT2mBtOy+KZfwwzx7n0/pg/o75prVn0VDLpDXSZvMEpvB9PA3WW2/HF5uP
x3vG8LgLtSHa+7wYlvMfeI44x9aH8HfNf1h7Do20e7XG2hyeBFP5x/yOuMut
P8OXmE/Ee8aIuEO1odoOXhwr+BGeM8679aF8k/lPa53QWLtPa6LN5Ukxje/n
aePOt96eLzX/GO8Za/gJnje+W+Me5sPMO63dj5X8KM8Vd4L1YXyz+S9rnbGO
n+IF4n42X4hzGL+Dvf8DgIrXEg==
         "]]},
       Annotation[#, "Charting`Private`Tag$418429#2"]& ], 
      TagBox[
       {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwV0neAznUcB/DfWTfMlPagpEFDaYgKlbaKhqKlvWgoI10lRZH2oNIe2jTO
WYfD4XDWOXufcc6eZxyvzx+ve39+7+fz3PP8nt+3XqcubTunJEmS6U9WWpKs
T0+S73mUxlRig75iRpKMNb/OTZzCCP0G+QOPcQGVKdFXsp9j7s3N1CVbXyJ/
5HEupAob9ZXtjzO/QRvqMVK/Uf7EEzQhlVJ9FfvjzX24hVMZpS+VP/MkF5HG
Jn2q/QnmN7mV0xit3yR/4SkuJp3N+jFsNg/laS4hgy36sWwx/8ozXEpVtupz
2Gr+jc40pRrb9OMYzwRymcgkJpPHFKYyjXy2ed/vdOEyqrNdn+Zecs1vcRv1
ma7fLv/gWZpRgx36dPsTzX1py+nM0O+Qf/IczalJHbuz5Efcx057GbpJ5n60
owEz9TvlXzzP5dTiaLuz5cfczy57VXWTzW9ze5wd14vkV5zBca7nyc/oFM/S
9VL5DQXev0v+zQvx3b22Ql7BSeYF8gvOMq+RR3CMeY48V34SnyFXxfmUD8TZ
kkvk+fJr2VCujfMod/u8ajLP9TnynbhfuVI2lnfEWZaL5XlyiDxbFsszOd5c
KD+Pa/Nq+VCcN/My+S2zfMZuOYyuXMnJXl8ov6Q2x7qeKz/lQfZ4T3XdFHN/
7ox75gTdfDmIh5ltb48czou04Ej26mvYnWoewF3xvZmj3yv/4SVachRl+rmU
mf+lG63ifLBPP49C5lPEAhayiMUsYSnLWM4+7/uP7lwV54T9+hXsN/9PD66O
58cB/UoOmLPoyTXxu3BQv4qD5hG8TOs4R5Tra7rPaeZ3aR/Pl9X6cplNL66N
Z8UhfS37+eaB3E0j1ugPyZG8wnXxW5PEGbM/Xb7HPXFOKLaf6EeZM7meE0mJ
56mfId+nQ5xL1tpP0Y82v8oNcZ6pEM9LP1N+QMc4Z6yzX0E/xvwaN8aZoWI8
L32B/JB741zHZ+uK5GAeob7r5fK7uD/zOtlErvd/DwNU/tLi
         "]]},
       Annotation[#, "Charting`Private`Tag$418429#3"]& ]}}], {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}, "AxesInFront" -> True},
  PlotRange->{{-6, 6}, {0., 0.5319226372214798}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.75071416393252*^9, {3.75071545657866*^9, 3.750715502357131*^9}},
 CellLabel->
  "Out[134]=",ExpressionUUID->"514f11d7-bc8b-40bb-8808-daf09822ad0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "//", 
  "Mean"}]], "Input",
 CellChangeTimes->{{3.75071425547396*^9, 3.750714262167418*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"63227b07-3424-459b-a718-69017aaada0d"],

Cell[BoxData[
 FractionBox["5", "2"]], "Output",
 CellChangeTimes->{3.7507142631410227`*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"77afef20-ca6d-4e6c-a29e-71add88cefee"]
}, Open  ]],

Cell[BoxData["Eval"], "Input",
 CellChangeTimes->{{3.750715322398375*^9, 
  3.750715322838686*^9}},ExpressionUUID->"1c414eea-a33d-4f75-9843-\
dc581e3a1870"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"PDF", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"0", ",", "\[Sigma]"}], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Sigma]", ",", 
     RowBox[{"{", 
      RowBox[{".75", ",", "1", ",", "2"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"6fc51645-95dd-4123-b9cf-e1763ca79cec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.5319230405352436`", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "0.8888888888888888`"}], " ", 
      SuperscriptBox["x", "2"]}]]}], ",", 
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["x", "2"], "2"]}]], 
    SqrtBox[
     RowBox[{"2", " ", "\[Pi]"}]]], ",", 
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["x", "2"], "8"]}]], 
    RowBox[{"2", " ", 
     SqrtBox[
      RowBox[{"2", " ", "\[Pi]"}]]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.750715387286291*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"09092d75-b866-4dec-be25-fb341004801f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ToExpression", "[", 
   RowBox[{"#", ",", " ", "TexFo"}], "]"}], 
  "\"\<{\\displaystyle f(x\\mid\\mu,\\sigma^{2})={\\frac {1}{\\sqrt \
{2\\pi\\sigma^{2}}}}e^{-{\\frac {(x-\\mu)^{2}}{2\\sigma^{2}}}}}\>\""}]], \
"Input",
 CellChangeTimes->{{3.7507252924851217`*^9, 
  3.75072532136167*^9}},ExpressionUUID->"ba467292-6c13-4c91-9997-\
41da9cc72453"],

Cell[BoxData[
 RowBox[{"ToExpression", "[", 
  RowBox[{
  "\"\<{ {\\\\frac {1}{\\\\sqrt {2\\\\pi\\\\sigma^{2}}}}e^{-{\\\\frac \
{(x-\\\\mu)^{2}}{2\\\\sigma^{2}}}}}\>\"", ",", "TeXForm"}], "]"}]], "Input",
 CellChangeTimes->{{3.750725331183021*^9, 3.7507253731620703`*^9}, {
  3.750725408016211*^9, 3.750725416546095*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"943bb5ca-39d5-4c22-a729-465d25217622"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", ",", "\[Mu]_", ",", "\[Sigma]_"}], "]"}], ":=", 
  FractionBox[
   SuperscriptBox["e", 
    RowBox[{"-", 
     FractionBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"], 
      RowBox[{"2", " ", 
       SuperscriptBox["\[Sigma]", "2"]}]]}]], 
   SqrtBox[
    RowBox[{"2", "\[Pi]", " ", 
     SuperscriptBox["\[Sigma]", "2"]}]]]}]], "Input",
 CellChangeTimes->{{3.750725445577022*^9, 3.750725524862646*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"45767c60-a048-4c46-9649-06b884ccdb0c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"3", ",", "4", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.7507254772162447`*^9, 3.75072547741154*^9}, {
  3.750725529183405*^9, 3.7507255316406937`*^9}},
 CellLabel->
  "In[197]:=",ExpressionUUID->"f3821560-4f24-44d2-a0e3-286514bf3cc2"],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   SqrtBox["e"], " ", 
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]]}]]], "Output",
 CellChangeTimes->{3.7507255321886883`*^9},
 CellLabel->
  "Out[197]=",ExpressionUUID->"ad63837f-3291-4fe5-b4a0-bb59599a3130"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "3", ",", ".5"}], "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.750725671751939*^9, 3.7507257016625338`*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"b0d8b970-fc3a-48a4-b818-3fcbdf697dad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      RowBox[{"Erf", "[", 
       RowBox[{"1.414213562373095`", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
        SqrtBox[
         RowBox[{"Log", "[", "e", "]"}]]}], "]"}]}], 
     SqrtBox[
      RowBox[{"Log", "[", "e", "]"}]]], "\[Equal]", ".95"}], ",", "x"}], "]"}]
  ], "Input",
 CellChangeTimes->{{3.7507259386511993`*^9, 3.750725967937406*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"4e2b5725-2471-4111-b140-028e011fe7f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"3.`", "\[VeryThinSpace]", "+", 
     FractionBox[
      RowBox[{"0.7071067811865477`", " ", 
       RowBox[{"InverseErf", "[", 
        RowBox[{"0.95`", " ", 
         SqrtBox[
          RowBox[{"Log", "[", "e", "]"}]]}], "]"}]}], 
      SqrtBox[
       RowBox[{"Log", "[", "e", "]"}]]]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.750725957638199*^9, 3.750725973334701*^9}},
 CellLabel->
  "Out[205]=",ExpressionUUID->"814e509c-9cb3-4214-b0a8-bbda1ecd952f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Erf[1.41421 (-3. + x) Sqrt[Log[e]]]/Sqrt[\n Log[e]] \\[Equal] .95, solve \
for x", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Output", "(1.41421 (-3. + x))/Sqrt[x]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"(1.41421 (-3. + x) Sqrt[Log[E]])/Sqrt[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              TagBox[
               RowBox[{"1.4142099999999999671`6.150413903852293", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
                 SqrtBox[
                  RowBox[{"log", "(", "\[ExponentialE]", ")"}]]}], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              SqrtBox["x"]], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Identity", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["moutput", {}, {"(1.41421 (-3. + x))/Sqrt[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"1.41421`", " ", 
                RowBox[{"(", 
                  RowBox[{"x", "-", "3"}], ")"}]}], 
              SqrtBox["x"]], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(1.41421 (-3. + x))/Sqrt[x], {x, -1, 43}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max13430$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min13429$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13430$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3975793$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min13429$\
3975794$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max13430$\
3975795$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max13430$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min13429$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3975793$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13429$\
3975794$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13430$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max13430$\
3975795$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3975771[
                    
                    Plot[{
                    Re[
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Im[
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$], \

                    (Piecewise[{{
                    21.000000000000004` + 
                    23.570639084129343` Tan[1.5040801783846716` #], # < 0}}, 
                    21.000000000000004` + 
                    23.57063908412934 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$], \
-1.0483139600287805`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$], 
                    
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max13430$$]], 
                    (
                    Piecewise[{{
                    21.000000000000004` + 
                    23.570639084129343` Tan[1.5040801783846716` #], # < 0}}, 
                    21.000000000000004` + 
                    23.57063908412934 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max13430$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$ + 
                    0.044096627920057564`, 
                    CalculateUtilities`GraphicsUtilities`Private`max13430$$]],
                     43.048313960028786`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min13429$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max13430$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = \
$CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3975771]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3975771[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3975771[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RoKCBg9Igw7GpAElKe/\
1kkti4drBdrbBPw8+u0matasU0wGa0odTfWk+33333fUeHYkg6fd6PXXVmA+\
CxckWnh4aMxKzXBQ8fneaS1CKCp5cwWe3jAlB7wEjPyB2vuvGvBdyRrQ7v8b3CYsKRjR81ZRRTUFN9\
yXJMxqp2jOW9Nj8ZMpERBj9CY+Hr3Ze7LwcOhiMZUy0BsnVsC1knkmiIOkh0DVj3jLCv7njg/\
L4qWAshO8F8AjUfeOdSBIbGMEJw3y8b73cTN3BxDThMZHxhdNk5Tlqe4HSkvJ0ArMc3zifrKdtgYlM\
lePmbsnNOgW58G/gAxHamJzHJm3PlkC/MC4ZfWdl9c+5G+B5ty28FCericP83jDkjWh6DGqZziet6+\
QYqbrWRj/n6qLmy0aDPH/K1P9Lh1Tp5TCetQ0DZkemxqu1twz/vC28yLHr5+K+\
Z8xn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIzbFd8hOn0qWOEEJs6yX2x/\
bFfg9aYQYu2mG5AOr2dAADkYV2y53aMp1aOMSBIZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ShboTHWVf/\
qi4lVzONBnyfsA1pCDXiv4m1kcacnk8EZ6RhHhBU6/eHFZJjYn0lv2gBAlzwilC0l/mY7+\
5h4uVQKr2JapLOhYHtjSn/kn0ywIfAk911tyxPUeXd9tiNoE4qVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwEJI7ju"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(1.41421 (-3. + x))/Sqrt[x], {x, -133, 175}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max13432$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min13431$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13432$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3975876$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min13431$\
3975877$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max13432$\
3975878$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max13432$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min13431$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3975876$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13431$\
3975877$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13432$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max13432$\
3975878$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3975858[
                    
                    Plot[
                    SlotSequence[1]]], HoldAll][
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$], \

                    (Piecewise[{{
                    21. + 164.9944735889054 Tan[1.5040801783846716` #], # < 
                    0}}, 21. + 
                    164.9944735889054 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$], \
-133.3381977202015], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$], 
                    
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max13432$$]], 
                    (
                    Piecewise[{{
                    21. + 164.9944735889054 Tan[1.5040801783846716` #], # < 
                    0}}, 21. + 
                    164.9944735889054 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max13432$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$ + 
                    0.308676395440403, 
                    CalculateUtilities`GraphicsUtilities`Private`max13432$$]],
                     175.3381977202015]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    
                    CalculateUtilities`GraphicsUtilities`Private`min13431$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max13432$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3975858]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3975858[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3975858[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMBIMBH5CADsakAaUp3+\
vFl8TCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z04kOOk3+v19EVrPkhOkyt4um/\
NUM5yWQj67jhXoDWTIrmAz65bE4HZAU5+APW+y9a8l2pGjD+/\
wvcJjwtODHw1jDPDQE93FckzFuvaM1Ls0P5kymVMOPsJD7dePn/\
2Ynvbw2AsI2IMKKG32kLmmSIakh4CXbLmLSfimz/eK4+fCs4j+F6AiEHfsd6JItTCSEE45hN86/\
lm6iYmZoigRNEzp8nJc9j2Am0UE+kEZjm+\
cTpZj9sCE5Vqz82tkpt1CvLhX8UHMnIxeY9L2p0dgWFhnDP6Tsrqn3M3wPPrtvBKHq0mDvN7w5E3Yt\
gh6GU6H7Wuk2ek6loX/Zyrs5ovGw3y9ClT/y/tM22Ww3jSNgyYHdgar9beMvzTtvAyx66fi/u2NZ+\
9owRcNRwqwX2UtODzKJopD7xE26erc+vwGDcqviN0hlSwwhnbOMt+\
cf1xtwKvN4UIazfdgHREPQPGkIN1UcftDkuZGWZEkdgCz6/\
rl002kXUoAXe2rz0TlNkB5glZtzyh2UsW6k5MnH35o+JWcjnRZMj7njCQglor+\
mtYH2XJFXQiAyOJ8IKmXoM5rJIaERUs+0EJEuVEMIRkv+zHffMPFyuBVO0qVJfyLA5caY7Dk+\
iXBd4HkZqsuWMHjq7gtsVsxvKoVt2YJcnitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DfypuP4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Real-valued plots", "delimiters" -> ""}, {
        
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "AlternateForm", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "Simplification", "title" -> 
     "Alternate form"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[(1.41421 (-3. + x))/Sqrt[x]]"}], 
       XMLElement[
       "moutput", {}, {
        "(1.41421 (-1.73205 + Sqrt[x]) (1.73205 + Sqrt[x]))/Sqrt[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"1.41421`", " ", 
                RowBox[{"(", 
                  RowBox[{
                    SqrtBox["x"], "-", "1.7320508075688772`"}], ")"}], " ", 
                RowBox[{"(", 
                  RowBox[{
                    SqrtBox["x"], "+", "1.7320508075688772`"}], ")"}]}], 
              SqrtBox["x"]], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "ExpandedForm", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "Simplification", "title" -> 
     "Expanded form"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"1.41421`", " ", 
                 SqrtBox["x"]}], "-", 
               FractionBox["4.24263`", 
                SqrtBox["x"]]}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedForm__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "numsubpods" -> 
     "1", "position" -> "600", "scanner" -> "Simplification", "title" -> 
     "Alternate form assuming x>0"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Simplify[PowerExpand[(1.41421 (-3. + x))/Sqrt[x]]]"}], 
       
       XMLElement["moutput", {}, {"(-4.24263 + 1.41421 x)/Sqrt[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                RowBox[{"1.41421`", " ", "x"}], "-", "4.24263`"}], 
              SqrtBox["x"]], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Root", "numsubpods" -> "1", 
     "position" -> "700", "primary" -> "true", "scanner" -> "Reduce", "title" -> 
     "Root"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Reduce[(1.41421 (-3. + x))/Sqrt[x] == 0, x, Reals]"}], 
       
       XMLElement["moutput", {}, {"x == 3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", "3"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "PropertiesAsARealFunction", 
     "numsubpods" -> "3", "position" -> "800", "scanner" -> 
     "FunctionProperties", "title" -> "Properties as a real function"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement[
       "minput", {}, {
        "FunctionDomain[(1.41421 (-3. + x) Sqrt[Log[E]])/Sqrt[x], x]"}], 
       XMLElement["moutput", {}, {"x > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"x", "\[Element]", 
                   TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                 RowBox[{"x", ">", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all positive real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement[
       "minput", {}, {
        "FunctionRange[(1.41421 (-3. + x) Sqrt[Log[E]])/Sqrt[x], x, y]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Bijectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"bijective \"", 
              StyleBox["\" from its domain to \[DoubleStruckCapitalR]\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Derivative", "numsubpods" -> "1", 
     "position" -> "900", "scanner" -> "Derivative", "title" -> 
     "Derivative"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[(1.41421 (-3. + x))/Sqrt[x], x]"}], 
       XMLElement["moutput", {}, {"(2.12132 + 0.707105 x)/x^(3/2)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 Global`TagBoxWrapper["StringBoxes" -> RowBox[{"d/d", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  FractionBox[
                   RowBox[{"1.41421`", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "3"}], ")"}]}], 
                   SqrtBox["x"]], ")"}]}], "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{
                  RowBox[{"0.707105`", " ", "x"}], "+", "2.121315`"}], 
                SuperscriptBox["x", 
                 RowBox[{"3", "/", "2"}]]], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "IndefiniteIntegral", "numsubpods" -> 
     "1", "position" -> "1000", "primary" -> "true", "scanner" -> "Integral", 
     "title" -> "Indefinite integral"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Integrate[(1.41421 (-3. + x) Sqrt[Log[E]])/Sqrt[x], x]"}], 
       XMLElement["moutput", {}, {"0.942807 Sqrt[x] (-9. + 1. x)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{"1.4142099999999999671`6.150413903852293", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
                    SqrtBox[
                    RowBox[{"log", "(", "\[ExponentialE]", ")"}]]}], 
                    SqrtBox["x"]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"0.9428066666666666`", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "9"}], ")"}], " ", 
                    SqrtBox["x"]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.013605642996704779`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.013605642996704779`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, 
                 CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.013605642996704779`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.013605642996704779`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.013605642996704779`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.5542864352693213, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.9440634465069261, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.5542864352693213, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.9440634465069261, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.013605642996704779`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.013605642996704779`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.013605642996704779`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.013605642996704779`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.013605642996704779`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1041188$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1041193$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1041194$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$1041195$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$1041196$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$1041197$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$1041198$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$1041199$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$1041200$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$1041201$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
1041202$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
1041203$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$1041204$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$1041205$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.013605642996704779`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.013605642996704779`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.013605642996704779`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.013605642996704779`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.013605642996704779`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.5542864352693213, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.9440634465069261}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1041188$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1041193$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1041194$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$1041195$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$1041196$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$1041197$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$1041198$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$1041199$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$1041200$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$1041201$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
1041202$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
1041203$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
1041204$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$1041205$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    146.98875973352523`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    73.49437986676261], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    73.49437986676261]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    73.49437986676261]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    73.49437986676261], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 73.49437986676261], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 8}}, {-1.41421, {3, 0, 7}}, {
                    2.5, {3, 0, 4}}, {
                    1.0606575, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 9, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {41, 
                    263, 3, 0, 0, 3, 0, 8, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.0606575 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-5, 2] - 1.41421 $CellContext`x^Rational[-3, 2]],
                     Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 8}}, {-1.41421, {3, 0, 7}}, {
                    2.5, {3, 0, 4}}, {
                    1.0606575, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 9, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {41, 
                    263, 3, 0, 0, 3, 0, 8, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.0606575 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-5, 2] - 1.41421 $CellContext`x^Rational[-3, 2]],
                     Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 8}}, {-1.41421, {3, 0, 7}}, {
                    2.5, {3, 0, 4}}, {
                    1.0606575, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 9, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {41, 
                    263, 3, 0, 0, 3, 0, 8, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.0606575 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-5, 2] - 1.41421 $CellContext`x^Rational[-3, 2]],
                     Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], 1} (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 8}}, {-1.41421, {3, 0, 7}}, {
                    2.5, {3, 0, 4}}, {
                    1.0606575, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 9, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {41, 
                    263, 3, 0, 0, 3, 0, 8, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.0606575 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-5, 2] - 1.41421 $CellContext`x^Rational[-3, 2]],
                     Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]) == 0, $CellContext`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2], $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 73.49437986676261]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 73.49437986676261], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 
                    3, 0, 4, 3, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 
                    6, 5}, {40, 59, 3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 
                    3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`getSplineSegments[
                    Line[
                    Pattern[CalculateScan`PlotterScanner`Private`l, 
                    Blank[]]]] := 
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`posis = 
                    Position[CalculateScan`PlotterScanner`Private`l, 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}], {1}, Heads -> False]; 
                    If[CalculateScan`PlotterScanner`Private`posis === {}, 
                    BSplineCurve[CalculateScan`PlotterScanner`Private`l], 
                    Map[BSplineCurve, 
                    Select[
                    Map[DeleteCases[
                    Take[CalculateScan`PlotterScanner`Private`l, #], 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}]]& , 
                    Partition[
                    Flatten[{1, 
                    
                    Map[{# - 1, # + 1}& , 
                    CalculateScan`PlotterScanner`Private`posis], 
                    Length[CalculateScan`PlotterScanner`Private`l]}], 2]], 
                    Length[#] >= 3& ]]]]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.41421, {3, 0, 1}}, {-3., {3, 0, 2}}}, {0, 0, 6, 
                    0, 0}, {{13, 2, 0, 3}, {40, 59, 3, 0, 0, 3, 0, 4}, {16, 1,
                     3, 4, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    1.41421 (-3. + $CellContext`x) $CellContext`x^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{1.5, {3, 0, 4}}, {
                    1.41421, {3, 0, 7}}, {-3., {3, 0, 2}}, {-0.707105, {3, 0, 
                    1}}}, {0, 0, 8, 0, 
                    0}, {{13, 2, 0, 3}, {41, 263, 3, 0, 0, 3, 0, 4, 3, 0, 
                    5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16, 1, 3, 6, 5}, {40, 59,
                     3, 0, 0, 3, 0, 6}, {16, 7, 6, 3}, {13, 5, 3, 5}, {1}}, 
                    
                    Function[{$CellContext`x}, (-0.707105) (-3. + \
$CellContext`x) $CellContext`x^Rational[-3, 2] + 
                    1.41421 $CellContext`x^Rational[-1, 2]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    FractionBox[
                    RowBox[{"1.41421`", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "3"}], ")"}]}], 
                    SqrtBox["x"]], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.5542864352693213, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.9440634465069261, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.013605642996704779`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.013605642996704779`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.013605642996704779`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.013605642996704779`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.013605642996704779`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMKEyCL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozkvNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoT48+\
v8H3Ck4ITA18N48ww0NM9RfIZS3TtGSt2ZH8y5TIhnP2Ex8OnO8Phi5ceBmMZE2NACf28LWQ+\
U0RD2kOgK9a85UR888cH5fFTwXkM3wsQCeh71jtRhFoYKQjHfIJvvdhM3cbEDBGUKHruNDl5jtpeoI\
1iIpvAPMc3ziZr2BaYqEx7bu6U3GxSkA//Oj6QsYvJe1zS7uwIDAvjgtF3Wlb/nLsBnl+\
3hVfyeD1xmN8bjrwRw45Ar9L5pHWdPCNV17roF1yd13zZapBnT5n6f+\
mAabMaxrO2YcD80NZ4vfZW4Xfawsscu34h7rvWfPaOEnDdcKgE91HSgi+\
iaKY88BJtn67OrcNj3Kr4jtEZUsEKJ7Jxlv3i+uN+BV5vCjHWbroF6Yh6BkSQg3VRx+\
0uy5gZzYgiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUKzny7VnZhk9uWPilvJ5VSTIe/\
7wkAGaqPob2B9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRStadQXcqzOHClOQlPol8W+ABEZmbNHTtwdAW3LWYTyeNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/QbgmG4Tg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"async" -> 
     "http://www5b.wolframalpha.com/api/v2/asyncPod.jsp?id=\
MSPa2172919f36g779c9a630h000011af8c205f341iif8798477530868828650", "error" -> 
     "false", "id" -> "DifferentialEquationSolutionCurveFamilies", 
     "numsubpods" -> "0", "position" -> "1200", "scanner" -> "Plotter", 
     "title" -> "Differential equation solution curve families", 
     "asyncfailed" -> "data not found"}, {}], Typeset`pod13$$ = XMLElement[
   "pod", {
    "async" -> 
     "http://www5b.wolframalpha.com/api/v2/asyncPod.jsp?id=\
MSPa2173019f36g779c9a630h00004bg3hd42eff8i0418798477530868828650", "error" -> 
     "false", "id" -> "InverseIterations", "numsubpods" -> "0", "position" -> 
     "1300", "scanner" -> "Plotter", "title" -> "Inverse iterations", 
     "asyncfailed" -> "data not found"}, {}], Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`pod39$$, Typeset`pod40$$, Typeset`pod41$$, Typeset`pod42$$, 
   Typeset`pod43$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`aux42$$ = {
   True, False, {False}, True}, Typeset`aux43$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "*FunClash.Log-_*Log.Log10-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "*FunClash.Log-_*Log10.Log-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "[1.41421 (-3. + x) Sqrt[Log[e]]]/Sqrt", "score" -> 
        "0.6862318840579711", "level" -> "high"}, {}]}], 
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "*FunClash.Log-_*Log.Log10-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "*FunClash.Log-_*Log10.Log-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "13", "datatypes" -> 
     "Math", "timedout" -> 
     "GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "8.522", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www5b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa2172519f36g779c9a630h000048iche3f00b2i61d8798477530868828650", "id" -> 
     "MSPa2172619f36g779c9a630h000054f575g8b2a1a0e6", "host" -> 
     "http://www5b.wolframalpha.com", "server" -> "47", "related" -> "", 
     "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Math", "timedout" -> 
     "InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.168", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5b.wolframalpha.com", "server" -> "34", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2018, 11, 8, 23, 17, 43.503963`8.391103798308903}, "Line" -> 
    202, "SessionID" -> 22630674132224157747}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {12, 13, 14, 15, 
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
    35, 36, 37, 38, 39, 40, 41, 42, 43}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Output", "(1.41421 (-3. + x))/Sqrt[x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "Erf[1.41421 (-3. + x) Sqrt[Log[e]]]/Sqrt[\n Log[e]] \\[Equal] .95, solve \
for x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$, Typeset`pod42$$, Typeset`pod43$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$, Typeset`aux42$$, Typeset`aux43$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{282., {84., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$, Typeset`pod42$$, Typeset`pod43$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$, Typeset`aux42$$, Typeset`aux43$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www5b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa2172519f36g779c9a630h000048iche3f00b2i61d8798477530868828650", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[202]:=",ExpressionUUID->"3235b529-b8f5-4f30-a270-d728b6be08f6"],

Cell[BoxData[
 FractionBox[
  RowBox[{"1.41421`", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "3.`"}], "+", "x"}], ")"}]}], 
  SqrtBox["x"]]], "Output",
 CellChangeTimes->{3.7507258637*^9},
 CellLabel->
  "Out[202]=",ExpressionUUID->"81511f07-d6dd-4ad3-9ea9-61f0d3176868"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"0.5000000000000001`", " ", 
    RowBox[{"Erf", "[", 
     RowBox[{"1.414213562373095`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3.`"}], "+", "x"}], ")"}], " ", 
      SqrtBox[
       RowBox[{"Log", "[", "e", "]"}]]}], "]"}]}], 
   SqrtBox[
    RowBox[{"Log", "[", "e", "]"}]]], "/.", 
  RowBox[{"x", "\[Rule]", " "}]}]], "Input",
 CellChangeTimes->{{3.750725747185361*^9, 
  3.7507257857464533`*^9}},ExpressionUUID->"78c1afc0-fbca-4804-aad3-\
11a430f5c3a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   FractionBox[
    SuperscriptBox["e", 
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"], 
       RowBox[{"2", " ", 
        SuperscriptBox["\[Sigma]", "2"]}]]}]], 
    SqrtBox[
     RowBox[{"2", "\[Pi]", " ", 
      SuperscriptBox["\[Sigma]", "2"]}]]], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.750725547089554*^9, 3.750725567293351*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"84992e92-9ffd-4e5e-a73a-983f8bf34c18"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Sigma]", " ", 
   RowBox[{"Erf", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
      SqrtBox[
       RowBox[{"Log", "[", "e", "]"}]]}], 
     RowBox[{
      SqrtBox["2"], " ", "\[Sigma]"}]], "]"}]}], 
  RowBox[{"2", " ", 
   SqrtBox[
    SuperscriptBox["\[Sigma]", "2"]], " ", 
   SqrtBox[
    RowBox[{"Log", "[", "e", "]"}]]}]]], "Output",
 CellChangeTimes->{3.750725567885564*^9},
 CellLabel->
  "Out[198]=",ExpressionUUID->"c8ed4fe5-24ff-421c-ab59-6361e563de34"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7507255823461733`*^9, 
  3.7507255884677343`*^9}},ExpressionUUID->"02091792-4601-42da-a34e-\
cc9d9d12e073"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integrate e^(-((x - \[Mu])^2/(2 \[Sigma]^2)))/Sqrt[2 \[Pi] \[Sigma]^2] \
from 0 to 1", Typeset`newq$$ = 
   "Integrate e^(-((x - \[Mu])^2/(2 \[Sigma]^2)))/Sqrt[2 \[Pi] \[Sigma]^2] \
from 0 to 1", Typeset`chosen$$ = 
   "Integrate[1/(E^((x - \[Mu])^2/(2*\[Sigma]^2))*Sqrt[2*Pi*\[Sigma]^2]), {x, \
0, 1}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Integrate e^(-((x - \[Mu])^2/(2 \[Sigma]^2)))/Sqrt[2 \[Pi] \
\[Sigma]^2] from 0 to 1", 
                  Defer[
                   Integrate[
                   1/(E^((Global`x - Global`\[Mu])^2/(2 Global`\[Sigma]^2)) 
                    Sqrt[2 Pi Global`\[Sigma]^2]), {Global`x, 0, 1}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "^", "2"}], 
                    "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], ")"}]}], ")"}]}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"2", "*", "Pi", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], "]"}]}], ")"}]}], ",", 
                   " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "^", "2"}], 
                    "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], ")"}]}], ")"}]}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"2", "*", "Pi", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], "]"}]}], ")"}]}], ",", 
                   " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "^", "2"}], 
                    "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], ")"}]}], ")"}]}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"2", "*", "Pi", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], "]"}]}], ")"}]}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Integrate e^(-((x - \[Mu])^2/(2 \[Sigma]^2)))/Sqrt[2 \
\[Pi] \[Sigma]^2] from 0 to 1", 
                    Defer[
                    Integrate[
                    1/(E^((Global`x - Global`\[Mu])^2/(2 Global`\[Sigma]^2)) 
                    Sqrt[2 Pi Global`\[Sigma]^2]), {Global`x, 0, 1}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "^", "2"}], 
                    "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], ")"}]}], ")"}]}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"2", "*", "Pi", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], "]"}]}], ")"}]}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "^", "2"}], 
                    "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], ")"}]}], ")"}]}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"2", "*", "Pi", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], "]"}]}], ")"}]}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", " ", "-", " ", "\[Mu]"}], ")"}], "^", "2"}], 
                    "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], ")"}]}], ")"}]}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"2", "*", "Pi", "*", 
                    RowBox[{"\[Sigma]", "^", "2"}]}], "]"}]}], ")"}]}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "1"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[199]:=",ExpressionUUID->"b5c53e76-4cf9-4aff-9859-6df03f36fee2"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Sigma]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Erf", "[", 
      FractionBox[
       RowBox[{"1", "-", "\[Mu]"}], 
       RowBox[{
        SqrtBox["2"], " ", "\[Sigma]"}]], "]"}], "+", 
     RowBox[{"Erf", "[", 
      FractionBox["\[Mu]", 
       RowBox[{
        SqrtBox["2"], " ", "\[Sigma]"}]], "]"}]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox[
    SuperscriptBox["\[Sigma]", "2"]]}]]], "Output",
 CellChangeTimes->{3.7507256177441607`*^9},
 CellLabel->
  "Out[199]=",ExpressionUUID->"2d07052e-f1bb-4539-b147-a4409f8fbed2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "128"]}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "135"}], "+", "x"}], ")"}], "2"]}]], 
    RowBox[{"8", " ", 
     SqrtBox[
      RowBox[{"2", " ", "\[Pi]"}]]}]], 
   RowBox[{"\[DifferentialD]", "x", " "}]}]}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"58371c7a-6010-421c-814e-170ce34f4b02"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"Erf", "[", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "135"}], "+", "x"}], 
    RowBox[{"8", " ", 
     SqrtBox["2"]}]], "]"}]}]], "Output",
 CellChangeTimes->{3.750726529968068*^9},
 CellLabel->
  "Out[206]=",ExpressionUUID->"aa8dac4f-264e-4115-b13b-9903df299a59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"n", "[", 
    RowBox[{"\[Mu]_", ",", "\[Sigma]_"}], "]"}], ":=", 
   RowBox[{"PDF", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"\[Mu]", ",", "\[Sigma]"}], "]"}], ",", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"n", "[", 
  RowBox[{"135", ",", "8"}], "]"}]}], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"5a821b43-eccf-4b31-b696-1c92cb7f6ab0"],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "128"]}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "135"}], "+", "x"}], ")"}], "2"]}]], 
  RowBox[{"8", " ", 
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]]}]]], "Output",
 CellChangeTimes->{3.750726584441065*^9},
 CellLabel->
  "Out[208]=",ExpressionUUID->"1f6db344-6e85-48ee-9a07-3cff4f40d942"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"n", "[", 
  RowBox[{"3", ",", ".5"}], "]"}]], "Input",
 CellChangeTimes->{{3.750726590252706*^9, 3.750726593735112*^9}},
 CellLabel->
  "In[209]:=",ExpressionUUID->"0d5efeb9-aab6-4efb-8be6-e1b15bf917e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{"0.7978845608028654`", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2.`"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "x"}], ")"}], "2"]}]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.7507266271297283`*^9, 3.750726633327148*^9}, 
   3.75072704760812*^9},
 CellLabel->
  "In[210]:=",ExpressionUUID->"a85ad829-1995-49af-b5c4-66494394ce36"],

Cell[BoxData[
 RowBox[{"0.5000000000000001`", " ", 
  RowBox[{"Erf", "[", 
   RowBox[{"1.414213562373095`", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3.`"}], "+", "x"}], ")"}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.7507270566332407`*^9},
 CellLabel->
  "Out[210]=",ExpressionUUID->"03013a8a-e595-4a33-99a4-78132032be69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Sigma]"}], "\[Sigma]"], 
  RowBox[{
   RowBox[{"n", "[", 
    RowBox[{"3", ",", ".5"}], "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.7507272836992607`*^9, 3.750727348349153*^9}, {
  3.750727424352414*^9, 3.750727428823511*^9}, {3.750727529345017*^9, 
  3.750727529831525*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"9907c963-aecb-4218-bd7e-fa6d1b616ddc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "0.5000000000000001`"}], " ", 
   RowBox[{"Erf", "[", 
    RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
     RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}], "+", 
  RowBox[{"0.5000000000000001`", " ", 
   RowBox[{"Erf", "[", 
    RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "+", 
     RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.7507274319522963`*^9, 3.7507275310807858`*^9},
 CellLabel->
  "Out[220]=",ExpressionUUID->"94895fdc-ae3b-4ba8-be6e-b132281b4729"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "\[Sigma]"], " ", 
  RowBox[{"2", " ", 
   RowBox[{"n", "[", 
    RowBox[{"3", ",", ".5"}], "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{
  3.750727512038314*^9, {3.750727588904469*^9, 3.750727592904948*^9}},
 CellLabel->
  "In[223]:=",ExpressionUUID->"e37e2d21-650f-4812-ba04-0806435366c0"],

Cell[BoxData[
 RowBox[{"0.9999999980268248`", "\[VeryThinSpace]", "-", 
  RowBox[{"1.0000000000000002`", " ", 
   RowBox[{"Erf", "[", 
    RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
     RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.750727513175281*^9, 3.750727595483452*^9},
 CellLabel->
  "Out[223]=",ExpressionUUID->"8ec69363-9119-4595-a876-c9d8f905e5d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"%2190", ".9999999980268248`"}], "\[VeryThinSpace]", "-", 
   RowBox[{"1.0000000000000002`", " ", 
    RowBox[{"Erf", "[", 
     RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
      RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.750727357226284*^9, 3.7507273977769623`*^9}, {
   3.7507274439104633`*^9, 3.7507275692135563`*^9}, 3.7507276038521442`*^9},
 CellLabel->"",ExpressionUUID->"f91feb0c-4f73-4644-8fc8-738b34c8d3ff"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.5000000000000001`"}], " ", 
      RowBox[{"Erf", "[", 
       RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
        RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}], "+", 
     RowBox[{"0.5000000000000001`", " ", 
      RowBox[{"Erf", "[", 
       RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "+", 
        RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}]}], 
    "\[Equal]", "0.95`"}], ",", "\[Sigma]"}], "]"}]], "Output",
 CellChangeTimes->{{3.750727381820912*^9, 3.7507273988409348`*^9}, {
  3.7507274689214582`*^9, 3.750727499987061*^9}, {3.750727552646448*^9, 
  3.750727570652231*^9}},
 CellLabel->
  "Out[222]=",ExpressionUUID->"8645b847-7cc0-49db-bd37-ec7277d0c9de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"0.5000000000000001`", " ", 
   RowBox[{"Erf", "[", 
    RowBox[{"1.414213562373095`", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3.`"}], "+", "x"}], ")"}]}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[211]:=",ExpressionUUID->"abc9fafa-ba8c-4b19-b951-dd5e11c649ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.5000000000000001`"}], " ", 
  RowBox[{"Erf", "[", 
   RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
    RowBox[{"1.414213562373095`", " ", "x"}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.750727064271389*^9},
 CellLabel->
  "Out[211]=",ExpressionUUID->"61c5964f-0bc1-4b53-971a-5f68a1f00dc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"0.9999999980268248`", "\[VeryThinSpace]", "-", 
    RowBox[{"1.0000000000000002`", " ", 
     RowBox[{"Erf", "[", 
      RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}]}], ",", 
   "\[Sigma]"}], "]"}]], "Input",
 CellChangeTimes->{{3.750727609636917*^9, 3.7507276276816797`*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"4b04d27a-fb59-4d38-bf15-e77ff44cbbc1"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"0.9999999980268248`", "\[VeryThinSpace]", "-", 
    RowBox[{"1.0000000000000002`", " ", 
     RowBox[{"Erf", "[", 
      RowBox[{"4.242640687119285`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.414213562373095`", " ", "\[Sigma]"}]}], "]"}]}]}], ",", 
   "\[Sigma]"}], "]"}]], "Output",
 CellChangeTimes->{3.750727633085268*^9},
 CellLabel->
  "Out[224]=",ExpressionUUID->"70d7a1d9-ab90-4c69-8820-f40d2bc24309"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "[", 
  RowBox[{"3", ",", 
   FractionBox["1", "2"]}], "]"}]], "Input",
 CellChangeTimes->{{3.750727697149556*^9, 3.750727703796103*^9}},
 CellLabel->
  "In[228]:=",ExpressionUUID->"5c41f0c0-b510-4a88-82cf-c7b674d7a415"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "2"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "+", "x"}], ")"}], "2"]}]], " ", 
  SqrtBox[
   FractionBox["2", "\[Pi]"]]}]], "Output",
 CellChangeTimes->{3.750727799610058*^9},
 CellLabel->
  "Out[228]=",ExpressionUUID->"90ce51b3-146e-4c08-a555-a49b49371055"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"3", "-", 
    FractionBox["c", "2"]}], 
   RowBox[{"3", "+", 
    FractionBox["c", "2"]}]], 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "x"}], ")"}], "2"]}]], " ", 
   SqrtBox[
    FractionBox["2", "\[Pi]"]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.7507278079357033`*^9, 3.750727841546946*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"97f4199e-93d7-4677-8140-380832b34b6d"],

Cell[BoxData[
 RowBox[{"Erf", "[", 
  FractionBox["c", 
   SqrtBox["2"]], "]"}]], "Output",
 CellChangeTimes->{3.7507278548988*^9},
 CellLabel->
  "Out[229]=",ExpressionUUID->"b26bf798-fc4d-45b3-bd99-3d9f4b281b2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Erf", "[", 
     FractionBox["c", 
      SqrtBox["2"]], "]"}], "\[Equal]", ".95"}], ",", "c"}], "]"}]], "Input",
 CellChangeTimes->{{3.750727865743498*^9, 3.750727878925477*^9}},
 CellLabel->
  "In[230]:=",ExpressionUUID->"4a5065b7-be5f-4cca-be98-e4a7c3ab3dae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"c", "\[Rule]", "1.9599639845400543`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7507278797849894`*^9},
 CellLabel->
  "Out[230]=",ExpressionUUID->"4d00dffb-ed44-4a9b-9045-8059790b8790"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[Integral]", 
   RowBox[{"3", "+", 
    RowBox[{"c", ".5"}]}]], 
  RowBox[{"2", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "x"}], ")"}], "2"]}]], " ", 
   SqrtBox[
    FractionBox["2", "\[Pi]"]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.7507277178959827`*^9, 
  3.7507277867567453`*^9}},ExpressionUUID->"b8f823c1-8601-4cc9-9b30-\
ab34c5710c10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"0.7978845608028654`", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2.`"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "x"}], ")"}], "2"]}]]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[226]:=",ExpressionUUID->"0635c583-7524-43c1-9b0c-5cd706a88e55"],

Cell[BoxData[
 RowBox[{"0.7978845608028654`", " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "2.`"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3.`"}], "+", "x"}], ")"}], "2"]}]]}]], "Output",
 CellChangeTimes->{3.750727691013111*^9},
 CellLabel->
  "Out[226]=",ExpressionUUID->"434af17a-630b-4a9f-ac86-d94c64cdf4ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", "+", 
     RowBox[{"y", "^", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[231]:=",ExpressionUUID->"4a00ae03-1f1a-424e-96c3-864f06d5fc47"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
ZbPDj69Wv6XU7/E/oXytU5buW2S150Pl+YzHtWNW9TpsjZv2/JbPHcr/ya6j
z37rOKOlv+HP5JxL9r96cJH646qGqXF2kf237H046yn/WDXOzbJ/n0XBH0eX
t+qnj8wjbcrefm3b17FqnGUs8qdajWJ7rb6QrMZ54ze/HU7NZq/4FOdq9a8S
pP+wkunnNdn/nAO1i9RaFqXGWVj2T/ufbXy1NVGN81/Zf/2rzXrsemxS46xv
0VvaWalK9ZpORrVeiln0n55GmwKLhM1Q4xkq/QR3tk5ry346Hbras0KfJLUu
isp+Zq99ObpGQX/1uyGfWjqHXX5PDzZMyJubrPHgEc/QH+3d39H4osfrPBoR
q343Se7vDZj9CZb9lClnF5PvotX+HJb9LK3asUSuZgnqd90lH3bqn9CD779G
qXmZK+vKDmZcc3Pi1xdqPMOyzC7i7vCJ1uQPD4i/INR4jsp9fCCzz5IHIo/A
0PiVzeLUvMyW/a8r7N6twYm3apz/yP59X7tUf+X6VI2zy935M13CvlHQ3SyT
I5ffU/tvA5n/cv10zOvJ1FBlx4bLfXw+8wc6yX68ps8r6jT4lNo368l+Luy4
7DV9dZDaN0tLXnlBrX67G4+MUHYsh2OJTZdd0skjoMvyG4eM6nfLyP10MNuv
s8n2mZ0nF7lrl6TkrO5ZlPfwQM6vnp/v4NDhpyjkder0mnJmxYPdkXmfYPnO
DnB/ib+WOL7LLPvfLu/bwXe9lP17VmyfyWWiqqeiu7Kfq/KdHeB+EveVOPzM
N7KfiyWj3V6NjlM48ifzvf3eLzIkKX84p+R1W8v3koDb4Xy9xOEnl8e5gdYN
8t25YVa4Se7j6wb0H/HgsZHPu8C8Y/y5UJ8g31ECnlXidhLH+PG7ZcsM9jAl
mRRulL8b5Jv2MerX/szWkQiLi53zYHiU2n9LSF56dKGxe5MWRhPsSWbpJ+S8
dvvRz+GJyj5kkrhX2ImcrZ9a4zsfye++lHWzzD6IdW7FvHY/iFX67C3bV5L1
scwOiNT80++1PZ3A7Z6A3cPv2sn9/VmCcfztWla7JH9HVLy2Z1rlQSY1v6fZ
e3bAj0j8qMQxzkyy/2X9CsdF7LGO85ns/83aCy+K11PvTNE59s4d8IMS/1Pi
bB8R2EcwHheZF2os36EDPojhbL8Q2C/wu1Nle7xPB7wf8rQSZ34Owc/BOPNY
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
JN4JPvvHb4aWGGX5qWyf2q18jMQnwJ+at2BNnz5+L/FszPPfh538J190uP4X
/ojyRRPnZuejER2uRpzO99ZTHAu8R7OQykV5oQeqPfATygu9RvEt8AGLU9/o
0sjvwa5FO2MavrNl8G05njjp//Apfduf/Kn+9X05YF8yXisqs9G8ML8nJvC9
xiv9fWrG3b/4PQmy51gc3eqEmkndznnx58I3Xg1dc2xPtjdgbyk0PqTD4Kt3
Xcv3Ng/0v/FBZRu2WtnO7w0N9I/xcl1Dyoy7zrEDYw+P/fCLdj2G+r1LpYfA
+wwt/++sAj/xS2Ynb6/zEXZg+u2ehU//VPbdfLMHmv/6uRffW73Xr/zj+dbP
IXuev9pxldnn7fzVVvX/f+PDxyg+vLi48TeKid/m/Vo7ryl+e1gxcd3YS5GT
9Bt2Ufhkz7nCTyvleA9Kj4UvUB7d+wL9bPzAZO+IVUv8nh/U/3D6v4TsmfCD
d89vdXVkntkh4Q8qzy3xVPC7IqeVG1AWO8kFO480vTD45LLr8qSkw1uKc/8Q
7l95cXWRHlLg8Dxx7PzwSOW5TXE4+W+x/8O7fN47tUif2VkMx/4Pf+LDeg+1
v5TvaenwJuI1FZcFH/nW3mqx9+R773b4K+K6x2r8O+W/HeTwfeKrFd9l59bH
urS4es3Op8ZPimPPt/6JjL0U2cbvveDwCHHs/PAJdVd8E39nvuLEgnyiuOLu
7HwxSvJqtuQV/D3Jq9KSn/BCxQl/LTlm5xrJsWjJMThyLFf2fDhxxU20L9g5
S/tCIN7md+OPb3hv3C3DfZ41kg/w7yUP75E8hK+XPFwruW1+ecUVR0nOw5O0
75yX/IQPkvxsIflpXPLzO/kL4MQnj9P+BW+j/StE8hYeInnLO8rI4Q/jNk0v
dX3+zJJfD3n72Lj3N03cdF1PUDvRH1J+b7GlKI4COQ+/JfvhBUX9T5wzcrVR
VPJdh5P8Xs7ptm+uiUnvccBv7wTbPaC1f9d6bTB+9gsmnysMyr+7/tjreqvs
M8jDhmdPVI0+7PcSNwUfcmuDzz9KsXx6xkOVr7iX/JXwmbHH7lxc0u/5VvYQ
+JIfms8uvOz38O4dfKTyGz+l9Y58a/pmpcWNH/J5npQfEH513pJybVb6PfQz
nH5+qhi5QTsp/3X0vgcHhfs0LsG4kTW/33Xs7aF52LWMH5518krhMZ+3oJj1
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
/qz0kyhnvLpovFjX1HO2fSD+AU75v6S3RDjjW1Hji75KPx9RPAl+N/jOvrv+
OHV9vy7p8O3i6KvwwYrH5lwJTy54PaJo/01w+E5x1jXfVdggM/TACe6ZXjS5
cfyOznUqJKd55zv8jLjkcFD++EYlfzs+ye47w2s2H1z6+CsHPMQ50z+bnDhn
+FRx+o35H6d4mHjZheB7B3xfbfLmM17ifqlnoRP3C58sTn9Sz0rFz4TJXwM/
U79kZNE75sSH0G+nfBO8Gz5I8ZzXvmZ+fMUfso8wz48rfnWH7slSf9W3Izpv
3HXE8n6bnafdhUmfvJPubSm/MLz/z4F7SfIbBu9B6B5ZuM6h8PNdA/eeeupc
CZ94PPpfaVXTyfdi/qBhur//lPZxeO8hGY2X9Tuh/AApZi8K1300vQtucr7X
5rC0l4dnkc/WvveebUvfuP9/fN4xsoPBO9x5bHFRHvjB8tPBf5qxIbXqY35P
U/m54Ou7bt1b9N7Wl7JXMM/JBxIqv5XZb5Wvg/cY6IcqH07ctuoJv+2/8I/6
rRo1NMNv3wUfeCD94IVLuR7sePQD7cdvCKedNfW/lh/s5DNJtZ/O8KSrnJ07
lG+E/E7YCStqPuBHs/t9TTOfmbYhz/ZNyt+jvDGB7802e2Nk436Vnh39m/cF
x/58VPbn3k5enfLKq5MVONeYn3GZ8sPcr/3X8lIqPwzxM8aVHybcyYeTo3w4
xO3YPS/lt+EdBTcOE/sw5T8vqPt4yT75Xt4hoHwJxWdWVT+wjsLVD8htN66S
OBnqX783rVLroz57L5bySYq3nB3of4s7zduUdr793Cydj4J2e6/s9h+pPO3J
UXnOO5YPp/U7h3bk+k3uwZfre9kvmJ9127/xSty72V7OO5T39vZkrh3vN/kG
T9B3sU7Re0cpbxXrET5MeahYj/BPMhZUiG/pNb8z83zXkEB+LdY75fvf/ErS
ssJZngzNf8onKr8W69r8g8rHxbqGf6S8W7manxaPrfxjynNl8m3wxtX/vCs6
R3kD7P5Lcu1/3gPtKXsC8rzEpsD7v8XFHQ134oiekH+EfEp8b5reXe0n+wbt
/FrvMGKngt+k/0UOsO9U1zuw5FuDn1T92M1of7LqZ37Cv+lVbmrpjBzrH/73
UoeU7pU3EB+bae35845BM8u2zfBSj8VjqJ7ujv+I/hlajP+omeaP3QfX/Kmu
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
6IeWz1N6IOWpf5f0sf8FriJVtQ==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxFnXX4FsXXxp9n49l9dvcLiGAgIAgmYHdgYTcWKgqiKCYWNoooSIhid2CA
ioktFogBJrZiYCt2t773h3t+1/vHXnN2dmZz5sw594ntOmho3yOjWq32bbNW
i1W+0KjV1qvXah+mtdrVSa12lbaBOhBltdpeqv9d9YnovUX/Ifp89euqfm+X
tdpt2q7UyW4tarXXRXdR/eG5zqM2P6tt1FKrnaW+/dTmJV3nH2276Ty/6tja
us5a2nbV/rVqv7T6HqG+x+o8T6rPsuq7jeovUdtfq1rtYLX7TW020raF6i9S
fVu12VL0xaJ/UZsn1f9GHd9EdUfpPI/qPD3VZnsdW031Q3V8oupXFT1L5ae6
72t0b1NVbqZn/l31vbVN0n1dp20NbX3Ud13VHaW+F6vPOqKfVrm6jp2nvtvp
vl7Wc32r+gt0H5fp2iuIPlLtT9E519O2p9ospfZ/qr6Ptq1U9xfPoW0b0X+r
3FLbturzg/Zn6763Ez1E/f7TOftrv8Z7Ev2Z6Ejn+lTlGdrWUfvtVb6n7R/R
81QOVvmvuuygbXvR/6ncUduI3O9vD93jTNE3iN5Y9MFqU9f5d9P+YPVPRU/W
tV4T/buOvaKyj8o/aK/tTj3/8iqfVDk69zM9rPN8pXYN3dsClYO0xTrPDTrP
Lown0bur3UVqv6vKR9T+W7Vpqv03Kg9Rm0Rt9uXdqTxE2z6iz839HDPU/ji1
OVfvfBsde0Jbe20X6thOOnaZrtNV33prtR+pc26icqjOu7HafKpjEyOPtS8Z
Zzq+uWhea3+V36vsrO0hnX9T7etz1j5W+7O19db+N+r/qerOUnmEOm2huq9E
f6ztI96ryj3V9hPRKfejNj+ovJBxrvsYqPZ/pR5/jMOWpscH46QU3UHX3Uv9
v9H+GL3TbVSO1/E1c4+d39R3B53za96H6CVjz6mvGHOR59QC0ffque7Rdra2
x9RmR9W3Uv2XanNZ5Dlc6ZzbqvxO57kk8hxn7C6l9ruI3rnuMfUF96ntU7U5
J7zzKbqH3jrWV+Wuuu/LdY4Gc1z3vJ7anqJzP63jm2j7Rfsn6D424vvy3VRO
0PZV7LnEnGqjc3ynvmuIHqa6LXS+zUW/pXY76Nil8B6dfz0dO1DX/0f7Z6r/
tbqfg7Q/knmo9scxBnVsM9Fvqu/+mcfbJNXNVPuNtP3INXRsMW1fav94bcNi
z98G41Xl32q/u657hcpldN29RF8l+jfxgD1FXyn6D9H7ir5O9O+ip4uua8D8
KXp06Xs4S/fzk+j1RZ8qep/Mc/Bq9dk69fd9T/dxqOiLRRcql1CbT3QPZ+tc
J+j5vhY9U8eu43m1faP9VVT+pPIZ1U9QuycYJyo/0jUeFN1K95Dqui+r/4vi
aU21f0r0d+qzifbvU5tVVGZq86rqXxH9ro79oO0pHcvU/kTVf6v9vrq/XbT9
LPoU1f2hco7aPKa+fbU/ivOLflv026I76NoddC9nqHytcL/NVV6k5/pV9AU6
9rHu8yGd43HVn6R+v6j+We2vmrn9diqH6Jzv6z4OVvmZ2j+i431FX9bw9Z9T
ebL6/qb2s7W/DDxK9EWqP03v8R3V9VS5k64xS/TX6vtt7uc7R9/qVBY/1iO+
jdq9qHI5lf/Ca7W9oP0Fud/tjurbTXRd7a/S+VeEp4m+RvThjFvdZ6XyK/iK
thnqs0bm83BO6haE+kLt5qvvR7qv4SojbS+rvp3O8YboFm2naUu0zVX9ayor
ba/xzRijfC/WpoaPP69ybfXtoPqMNVj0WtqaokdoK7W9rnZfMG+0PS/6O+an
yld1D2eEa76h/d10b7vB71T/fe7x9Ybogfr+rVX/JvNKZatwzh76xnepfFdt
b9M1p8a+3ocq52v7U9cbqnf9hN7Bj2rbSue6Uu2fVfs2oq8SPVv0t6LvUr9p
Kk9R+5tU/4rqu2v/atFzRHcuvE69zNoo+n61v4/xo/bXq/4l1fcsvO7PFX00
axvzXtdtp2/xtu7lVL2r01U/W/WZ5vVKOnaL2r+u9muo7608r+i1RU/lWeFF
eieX6ln6qDxbfZ9T35y+anM381dtPtG9TNC2la6xoeqnqf591W+jPler79Yq
T1DfWer7k675O2NS7R9TOVH39KP6naeyc+55eJro69VvUuy5Uap8Joz1VqLn
hHnYWvQLYQxtrWf8S3WXqu9N2tqo7kaVu+vb7ZZ4rHfNPb6vVP0quo/HGBfw
DPV9R+e6P/Oce0/bmmq3GLT6tde2rNrlKm9Q37axeQtjFP7BmGRs7p+YDzBW
8tzr6I065wQ9/y8qO+u97Vh4/P6l4+fqnbQRfajoO9T2dm2Lqu+nKj/Rlkae
W0uoXFfnH5x47iyubTP1XUR9x+p8m4teQvQKus6LDa/dX8BTVb+46g/T+T9S
nzHaNtSxnjrP2LCmn67+r6pcUeU26rMt307Ht9N5ctXfqrqntE1S/cGq20H9
Otf97Z9JPd4WUVmq/5KqP1LXfEvl0tru1bFc9UuIPlz1N6tcVNtE1bcvTK+p
73Ci6EVEb6A2h+hc1+p4a+QEXWuW6hfnfGrThTGsNkNTz7slkHVU35Uxo/r1
9a72QNYSfQDrJnxaz36v3stYHdtQ5fF6tq9FHyP6GPgfMin3Vbg8Rv2OVv0L
ojtoW1L1nVQez/3DX0S3Y2yovqPK41Q/I/U8bVF5eOo5tajKU9Vmsbply7Tw
cxwq+tHU8to+ep+zVP+x6tctvL6wpqyEjBjGFGMFPg9vX5H7EL2ztu6ily9c
nqVzDmPciO6mbVjqsb20ym/0nHvrmaerXEHtl9Xx0Wq/XOG2I5EnI9/DMvBv
1U/R/h0qT4/MR1dFti+8fm6s8mid9wFkJZ4D+Sryt1mqsCzaW+d8vvBa3bvw
WsPa0RN5Ufexr77JipoLJ6n/czpPN5VzUvOcoxi/6rNa3esUawE8eWXWyMLP
uF5YO1iDesHTU/Ock9X3K/XZUuXDyCoqKx2/CxlV9acw19T3IdWfo/rVaadt
AuNQ5Ztqc7LaTNP9jdF8HaH6Lqp/X/VnqP5+1X8ueiT3qfPM0LGL1GZTlZtr
O1t0r4Z1yjFq8yBjT/f4fBhj76l+hOrvU/3fqn8A+QSZQO/wfHiK6PYq34/M
Bw7UdzsgrD0PZV5PLtH571KbO2PzpSE6fnBinrCDnvlM0W+gj2h/I7X/GLmw
4Tn7tN7DE6Iv5DuqnJ55zbxe9FkqN6hbjp/cMO+5TuXruueTVHeP7vkwtR+t
Nj1Uf6+2UYxJlR11bHtdt4PK39Tvbm1P6tgdKp8K83ei7vc8bU/DC9TnQfil
yoN0/mvQa9R3R+2fh9yt8oDUfCJTubGeZ4L69lb5e9P1j6j9r6J3UdtH9NyD
RJ+v+j9U9lNdi84zTX0P0f5jKh9Xm/1Fj1Ob79Gzdb5T1OYIbVfpXP1VP1P1
1+bWvd4SfQeylI53VHkna6fozioP0Xs4RnQh+lZkctZftR+obSzyhcoddKxQ
m9t17clqMwiZTfX38K6ZuypvVv0Bqn9B9dtrv6n6qallQmTFFeqWgZlHy2k7
MLNueKPajND7LhLrqGP1XnZBB9L5jleboapLdb5XdN69VX8lcp/ovuhiondW
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

           "]], Polygon3DBox[CompressedData["
1:eJw1nXfgV+P7xs97nPM+60NpoqGUlBEZJRmFSELZQlSSFL5mZGTPrEIZKSIj
M1RmIjMiWQmRimTPjPpdr67z++P0ee7zjPO8z3me+7nHdd+1GnhKv5PLQRDc
EAVBVX8PTYOgrW6sFHFhHgTz4yC4W/eHqn626Jd1v6XqDywFwa9hEJyu9nuI
nqP6U1S/axYEYypBMFl9mqju3loQvCB6vcDtW6i+j+glGmeU2i/T303Vf5jG
21v1X4huLfo/td9D9Lt6/j0qj9T4L6v9JP39QnRTtblP5Z/UvoPKw9V/f7Vv
o3sXq7y97v2lurt0LxB9oJ55tObymcZ7XLeuVrvXNV5r/b1I9dup/Z9qf5jm
vJnK36k8WvVfqM9a9d1bfRbr3jGqH6H2fZmb6ndR/5tEH6M+f6u+rehLRO8g
erXo3xPNX/QBun+q2o9R/yNVt0p1F4neUPfPU31H3ftd9y5VfV+VW2r861X/
vN7Xibp/oO4dpPIDul9T+/6i31PfbXRdI/oo0X/QX7+vh+a6p9odpf7viZ4i
+jXRt4n+Rr8nVLtDdW+F/n6j+d2s/j00zgjVrxR9q+g9RZ8s+me12UJjR/wG
jbG95nCB3kdH9a+n8qca7z/RbdSupGf9T/dW8r1VPlT9T1b9MaJXqP3l6t9P
v2+5yh9q/M9V/7HaX6m+B6v9ITxf7SPRt+nqp3vX6Oql9vuo7zGq/0ztx6lu
P90/UvS1+ruv6nupfoDo8Zr/vpprV9GHid5O9SPUvsb60z8P6X6i+uP0m2qi
HxQdiz5W9L9qN0/3fq14zM9En6LnLRf9nugRKp+ma5XoIzTu4Rr/79h1k/V7
3hF9oX7ffhqrqca9VvRA1T+scR7RNUjlM9T/B/V/Rc85QvUXq/0Bar+x2o/h
fal+mepD3btCdbNEH6S+s/WMmbx73eutugZqf7XaP6bndhI9Wr+hpcqPR17L
rOlWKt+jdhWVD9GYg/TM7dT/M9EXsm7U/z7Vh6IPV/1Q1c/WM4bzPTTGwSoP
UPtTVd9P7d5T+230G4ap/m/dm6X2T2mcLsxV9JYqv6p7P2qsPTTfj9TuTPXf
S/WvqO5/6v+h+j+ouotpK3pvXW+I3lb3m9UFwVL1L6nfAbr3pf5+yYfT3/0D
84yn1W8njXeVnre1ys01x94V781zNVZL0QdU3Pc8+Iv6l1Uezx7SM15U/Ums
LY3xgsrHa35naaxD9fsWqn2dxjxd9Oaqf4hvqv5/aLw/4Y0qH6L2bVS3XGOc
r/aDRJ+h9ger/wLRC9TmL7Vvpfq1Kr+sZ7RT3y6qb6nfN0RzeEx1j+s6QeXB
6n8m30f176v/ErW/hd+ruv6id9DfU+FL8DSVh6t+qcZ/V2NmKrfSdXDFe/kC
td9H17Fqu6PaTlY55r2Lbqc5P6jycboeUN/XdW8470/Pn6PyiQV/v1pzvlrj
XROYZ8EH4Ad1uh7XHJdn3puHw0NVnql7N6j8jOoHq+0Juve5+m8vei+N/Zbm
MU/l/6lujsafELvvgep3rOhX9fcx0QvU5gy1OUb931T/bXTvNN6V5rNA9AzR
/wvNp+BXua5HRfdkPqpfKvoVPW97XZur/Lbq5mr8SzLzp880znp6/wNT7xf2
zSDVN9LfkWq/le5NU/kG1R+t8gLeFfwfPgiv1RiPaoxhGu/Litf/ZWo7Xc+5
SnN7nDNAbfdS/XjVtxZ9kXjRFZn52XfqW0/P7y76Jr6f6p9W/8nsoWK/c54N
Vf0XFe+JISr30HWz6E/Ufqbad8/97Tvp3TTXeBvp3mzVDVHfF1XXVu2PVPth
Gneg6BPVbjpnrPo8B28T/abK49V+nuqXZt4bfXXvKpW76bpK/W8TnWjsOl0z
i7XyvNqvD08SPUj0C4yfej+yL4eyXtV/tPrvqP4NVM5VP0PtB6j+OdVfpzk8
w17WvetVXs5+U/+P1Ocp0Vuo/QeqO6c474em5i/wmRNEj9Lfj1X/su41V/t2
esZR6jtc5SGq/0D0xfo9O+i7HCT6Rn2D3dgPog8u9iv8ET45WPQAtX9b/Ttr
Tufo3XwregrnNmeO+n6t6zrOc7U/Ue3/Vf3tovcV/ZTo/9RnA7V9mnes73GT
xh+g8d9X/fG8D9FfqP0lBb87Wv1n63kHcGar/ISuS0QPYX9xFup3XCH6lMD8
/CTd+6rib3aiyr8mxfml3/N07vNrlOom6l5v9o/mc5/msqXo91TXS/fOVf0d
xZwHc2bDL5iT5vYJz9B8W8GzOZNU/5zK+6n+ttRyEPLQKYyv8XZX/Q2qf1X0
dM460ZMr3nPsvZ8yn3XIIJdz1lXNS+Gp+6n/YM3vUd3rHvg83Edt7lT/6aK/
EH2srmmqH6JrK5U/0fW1+jbV3F7jvFD7O9R+ue49p+f1Ej1R9Gair9K7OVz3
TlM50e+az3mjfn+rfndkDo15fWpZabjoT9T+XdX/qfrdRH/AN1T9m+p/ivq/
pP5Him6v9j+q7hLR/VPLm8idl4r+CrlO9EKN8YTGWqIxL+P80P3LVf+p6AtF
N0cuzT0O452ke32Q0VLLV8hZl+WWu5G/T+R7qX6N+k9T+Qj1P031gdo/gvzH
vhE9UvQ+nId69hmiv1T7y1XfQfVXIJ/q/Vyjud2lrvXV9iO1+wf+JfpwlfdV
/STR36vPPGSDxPLzUXr28NzP4XmNdT2ve9PV5wO1f0H9zxQ9Qn120fOfVbth
aj9F9bNULzJYqfqTVb+r6p9jnal+lu7dCC/SeMfr3tNqv0jt5+neuar7VPeG
q/27uveI6obq+z+hd7JP4PPycM33WdX1UP/D4HW6nhfdR/R6Kv+W+WxFZrxS
5c+QazXepmqzl8a7Tr9vJ7XdVs86QPO5WfReyP+i+yKPq82z6vuV7m3E2lH9
fZxtqp+p+oP5jqqfypmt8mWZ5Yvlaru+9v8A5BvRA9FLVP5X/TN+q/rPUv89
1f5WzWWaxvhY9ceJ/pCzRfSnrH/R74u+X/RC0bcl3ot/6ln91P8TPedf1fek
vZ6xB/KC6E/VZobe9Vq1f1jlI9X+GbW/SfTuon8TfaDopvADZCe9k9+Qp9S/
n/7+pnsL1X8jPXMj1qbuNVN5Z7W/UfRuar+G/QFfVXkLeLTKV+i6TvQZmsOF
Ncu9yL/N2UMqb6Rrf9FjVX+qyqP1jIWqO0vjfpBb7kX+bVXy+f6lLvTRQ/XP
26xxjbm7+m6JPKByrPluI/o19mvq/Xy++h6kfh9pvFz126m+C/xGddfoOlxj
Xaq+H+aWm5GfN+RMQxdQ+23V/nW+R2q9C/2rbcnr+yr0MNGd9NszvY8PRX8o
uqH6dNeY89VngeiOKn+r8b9O3f4vzX2V6L/U/hvRE3SVkSVFr1B5HDqu2izI
rJseqOe/p/KWavNe2TI4Z/xCtX9H9KGiN4ktj/ZQ+13VfnfVvaXnzed76P43
el5n/V0mekjZOtZitflM5cbsGdXtqGup6MHwrMj8YG/2hsbrEVp/PZ2xkY9V
3k/1nVWvpR38ovqRok8SPTiwvn2W6BPRrQOfD6N1Xaa+3fT+liLjqb6f6g8J
LDNzLnI+jlX9rqwtzf9s9rLafgw/RV8JPMYvqv86tF3iCtG/iv5BtF5TcC36
Lrp76Dp+E7/tHF3DNcDxgfXVM0WfIPrgwPaFy0L35R3xrlIN1kn189E3Ust9
yH/XwiMi2zWwb4xHno3M5+B31yNTqNwQnqO+/TTWuNx8Dn53g+q7IDNF3jvs
oa4qr6/2m6l9Z83jN+wpyNiqvw37R2R7whmq7657L6o8V1dPle9FB4usR6FP
TcGmgWyv5+6i+bdVn1NV3l9XV9GrRPdRub6e9zPvQuWxyNvqs7f6PwqPj7xe
l6N/qs0DKv+BPCm6mdr/DD8XfZXoS0Lzjx9Er+b7qv5L9CX9fVj0ExovU5t6
oqdzHoheH3uPrsWaz1nwCJUbIP+xv3RvA2wSmsMnyIOin1Fdons3MRe1ydCf
9Lw3VG6DrAi/qHl+m6t9E7X9WfVrRO+i+1+h/+nvXNEJZzr6vuonit5BYz4i
XthE954X3U71jUPz+xdEV9lTNdsM3kRmCWxLQMe/Qe2+D6z7Y4P4ptB/sE1s
h0ys37qT+v6QW2ebrfJ3lUKX0/MHlX1mrNB4T+g6vmQZ+fHENoCbNP4PgW0D
2Gy+KuRxbDnT1Oa4km0uDyW2qYxR+5WBbS0Xsv5Ud0/V8ioy71x4RWBZGJvK
NWr/bWBbCzLwq6pvFVg2fib0u/5N186adzW07nef6BTdJHT5F11dRa9K/b3X
Q8/HfiB6TNk2HWw7rAvWBzLRl/q2bUW/VbbOjY7Pd+J7IfMvU/27Gv91noWM
Bg9LLY9+HPl9Xq6/pYq/EefxdaKjir/xJswh9Xqrr/JPan+36CvhB5pPX5Vf
0zWP9aL6FbmfwbNe1b35evZ3Gm+0yh+o/eai/8NugD2nbPsQ9iLKkzhP1Pb+
1Ocd5x7n8c/Y+0R/pj4dde/fyLy9i8app99bwU6juntYk9g2aj4L+mu8v+F1
om8Tfb7mdDlnu+79iryuexG2uprLr3DmYUdS/d2iH8BmoWd9Dw+E16tPe9U9
GfpZP5a9Jn9EXlF5seq3Vl1J1yWBx4j5nuE6kTK4WvTvkfc5+31LPSvS/C8N
Xbe3nve9ymNT2yuPUPmT3HwP/jdX85vKuk+9ll5Qm0mp58zc4UnwvPtqbnu4
6l+vej39ofZNRJ+k9Xi/6l9H/9X1lupXp97LP6r+XZW/0RiniT5Mfd6JPB72
lV2L5yODIIsMqNjeuDL12n1K/e+EF6hP/YrP1PZq2yizfHEwZ7N+zwaZ+Wlf
0b+L/hadRm3rIcNpfr0Tz+8B1VfqbK/Yk/mwd0Tfqb+PVPzOf9Cz+qr9W8h7
fEvVL9N4q8p+Z3sn1nnRfZEBnyzWP99uup53e+p3wLvopmtn/Z671OYxlb9g
zYnun9m+jp29zPi6N0P0seiQunePrpkV37tb5VE1r9VHRU9U+fPQZcZk7IXI
lBXbvJAvOGxbF/aA17QeSqLbVGzff0f0FbHPV87Zv3Pbpzl7OYPP5Xuo/niV
z4AvqP4i0fuJPhK9K7fejv4+Tr93d2xNkWXLLXRvH9YTMprGO1r0iJrtGtg3
xiCzR7ZfHoO8yJlfs70f2+H+oo+q2f6Jrfsg0QNFX6nn91X5GJX/Qp/XO25a
sYw8PvWZwtlymt7vyaHPCM6K/4kegWyq39+hYh1hLrxA95qovFPF5y06BrrG
02q/gcprkSkr9hngO1gEn65YB0PeGhuaV+9c8RnN+8Y2d5J+2y+aXzXzu+Cd
7JRaR0dXf0zjr1/zGcpZego8NvT3wZZ2uvr/mltGRVaFR6yKLAMiC8KzfhId
InOKnqNHv63xv9f1p+pexh6R2sa+F9+5ats7+gr6H3pgXGf9DVsCNoWZKt+s
696KdYS3NP62mffrBfA2jfUO/En0r+pzo+oXZrZNH6bnv5/ZPjShYpveDSpf
G1m3v0v0TTXLO8dVzCPZo+gHA1mvgffweF33I2/q+fOwFbJGKp7TLawP7J8V
t5kg+kA98yGex7vX7/kgND1N1+01+y/gJcics/UObqx5LujMY1W+U+PVq1hm
34rfn9r/czS6rH7vuNT+mSNFL8otD6zzFyEX5d4X7I8+gf1dvK/TRTcUvQ22
Qo0/peJ3Nk5tz+cdqMzWnIkNGZml4j2AT2mc2tdVfKa25uxIrU+jV3+h543V
37ziM3kz1mpm2/8A9V+kjXZXansnds8lan9pZFsm3wR73bWcwcgiyHiaxAmR
eQE+v2tU9y4+FGQv5CneZc38j3vUYW/rpfIRuh/pfb9Xte0NG9zD7Ek9P1a5
nZ55TWIbALYAeNCeNdtgscXCg3rWrC9jH8ZOXNN4v6eW5ZZxvhTybEh77LUa
b0VsewNrNamzzQbbDTr345xlal+p2Ob0rMq/6iqL3hR7mfrPq9o2jY36QbXv
q+c/rPIdnO0aryZ6a9Evo89haxQ9kvNA9f/l/gt9q97fWs5b0efAK3VdpvL8
yLI799BZ0b/217PPZg/X3Ia27AHkfWQGZAf2APrxp6HnwxnEWcQaZi0j46yM
LC/9g7wPj9DveS0yb8fmiw3pJ9X/y9mq+idVbs45D39HZgutr+HrREd8V/0f
1TWoZBmb8+wBXcdwdoneU+XnsNEgb6rvxno/S1gzoofq2jq2PyFX+UfOcdX/
VDN9Avqm/t6h+R2BvI3tIbYOjC48lW8GL1H9UaL7YzdT3fd8V5WPVf/vsV3G
lo2OUbldbHs39avUbjM9b3PdGyD6Y833I43XXvRH2CYL+82i0OXB+EFFfxx6
LPrQ91+N07SQp5Grb9T4GxZr5AaV51Tt++Yboj9zXvB9G+r+c1Xro8jO+5Ss
zyJvLRPds2R5LNAzWldtv8SfVKd3ui37RfcaFOc99u1mZZ/vZbVvW7W/Gn/s
gtDv7jBdrUXvHts+fgnvNPZ34fssYo2F9kdjG+2q8WZE9i+P4HwSPVPlv5CZ
qv4NrNXmGmN/fovqG6nuH84X0W1U/7fKWWJd6g3d20jzfUzvpGfVMtujKtfF
tm9djtxRvN/tRF/NbxD9kNrspnJLtb9LYzVGh+BbiG6EL0PXnSq/pH7jtb8W
qf0Y7H+8Bz1vgcpdVH++/u6mez1j+5s5z/ZUeW1oX++NonvHXpOszS/hgap7
o2Zf5vW6t6/qbsH/IPqziv2fW+re54HXNPZq1ghrZZH6f6L+9UV3Fb2zrg1i
6wToBk2qfj+r1aZb1TpAVfTGsW1vvFPeLe+Ttr/oGatVXl/3dmSdYaNQ31+Q
AarW767GVqL69qJHFPId73sv0TuFfv/T8ClVbRNgf/I8bJH7Ffa+kN9Qtc1l
hv7ZUHTvqn2CT4e2tyxV3S4l22PwX+yj+otV31nlWVX72vco2f6L/IZ9tTk6
CzZxjXcQ61v3z8n9nfheHXRvTs3rFd9Fqez9fnZkeyE+8Jax1whrBX38enRV
1X+r+u90jVF5k9C26fexMarcR+1vrnrPgBkYHdn//bmui1T+PDOeoJPqL1Z5
MWcu34s1E9tvg//mS84PlSt6Zxuq7gXWuN5ns9C+yTdUf1po+QZfyB8ln9dt
sNEFlpGwbz8X2186SOUr9fu7iD6t4BecLdiXsTcP1O8PCn0O+8JdJeuP6H/Y
kwcV+hv6c3vRf5V83qOvo6tMLll/R79vqPKDJdtTsCdupXKl0H9e0vMn6lFD
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
cmzl8CR4Ez6hAYnXwxT8miXHdnKebxA5ZpNYnM9y49jBs99arKcwsg5HrDk2
nkmBY0Ampo5JnxwY4wI+cU3svtgAsAUgYyNr418Dq4MOgS6BDRhb8OXwJJXf
U/vNRV+c2Pf9NjpI6nilh+ElZeNHkKGQpeARxAJdmrhuvtq3S43pAtsFRhW8
yiapbRfTRD+W2qaMbfmEsuOxsLFia+WdglcblrgtNo9QdDUx9h+bAbaDMHFf
bALYBoi5Ji6ANhPUfhFrMPBveq6QhxpExuQTm7QodWwEmKK/C38HWEwwLmBd
8HcQOwSGDCwZ/g18t2DqwdZvU7MdB3sOsRv4K/CNEnNB7EVL0a+UjAnHPoyM
iqyKjR5b/crcuIx1+AyehT2zYp8L+Jr3dX2gcqbrx9gY4NMiY1zAugznTCsZ
0wa27QzRzUrGuIB14TweEdl/S2z17Yl5RZeK44nAwF8ZGUMElgj7MLGbYJjB
nl+dGKsEJvnP1Osd7BaYQrCFS1PHFoA5/UflF7DxlYxxAuu0bRqsC3iYVXb8
DusDrBIYJLBIUeK5rIvByLzewCKBif4ltf+L2FcwiWATwQzODo2XArQGBvCV
0HgpsIHMl9hJ/IVbq+/XueMoufd8ah8avjQw98TTHqX2pZIxnndklifxsb+o
4bfNHZ9+cNU+HHw56E/4yrDZ/ZdYX8JXhk0M/R95/Sq9z29KznWAfoMvC53k
t8RzYm6vlI3/2i+xrEbMS4fM8jg+95m6t43KxyTmNWA6t8osT12g8ReXHFvP
mcjZiM0BeXO3xLLFuOJ8P1L02sCY1C35LaL/DWyTHC+6X2LZkhiZLUQfmjg3
xX66Rqv/4aLXBMbwTcisf4GtIuaZ2GfwT2CT7tf1rMr7q351YMzw2Mz6F74c
bH7oV/i88H0RHzex2N9go+eWzA+QCZENNyhZv9w5sa8NHRb98cDEsX34ZMcV
+4+YpU6q3wP+ndrXTMwl8ZLI/9XINityfxDT8WJomzixHierzRNl+0gz0XNj
21MfLRsfivy/UeQYrDHFfqMOH2tc7LenyvZRNU5tY+e8YEziR9Fn6keOgSfW
8sXU2PzfRS9V2wvQwUW/JrqV6pblxu3TZjb7P7YuTxvio5fmxiHBk2fxW1Pz
jjr2u9rOi60vMyfwbfh4OB9mlh2P/Wbm2F8w4W9lPp+I/T9Bz5+WWt8D8w7e
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
KrDX/wdkG7x9
           "]], Polygon3DBox[CompressedData["
1:eJwt13ucT3Uex/Efxsz8ZoYh1ymJXHKp5K6hNGFcSpSQmDa3otrIboaKaB+5
7FasWgqVxCKXSh5ySWqRXKttJUKbpajH2hZdbLbd5+dx+uPzOOfz+r4/n8/3
fM/5Xk7dIaNuub9sKpX6iJVnjXLcl0ml1mSlUruAqelU6ovsVKp3RipV23Vi
Zip1RV4qNSQ3lTpQLpW6mKYrbTn+i2KPaG/PPyvpN/zt7DL+tSyD/jv+B+xK
fkeWxs7xB7BGYk6pky/HTnXbY793X6DGan3rwN/AaoqbipcVe4bfh10q9nOx
KXy92Gqsu7gj2A3wk/p+K109uuNYWbpNNBfpdzd5DmJlsI1YFdZZ7H6sk9jH
xVbFumGHsR7YE9hWLEvMUewWbBt/qRo/YN/SXogt4deNcTCmr+v3DvxRugrq
tlV3MjYpxseYTsVOuh8h9+tynuW3wStiFdizUUNbJrZQniFYHzleoGutxmPq
VsOX07XhF+BdtO+Taz4+QN0jeEtxDfl76Q7z57ODYgvx08bna35TNg6rRLeI
7nJ+hrov8AfR3STvPPkn4zeJuRCfQH8V/yF1tvMrs8ViH+Z/xKpqP6kvt2N/
5dcS30Oez7AFtCXYdWrMl/8zfmtj1k2+KfGO1aiHPSdHV3512t78E2IHyDfX
uHQUO1fsPry52KLoGzZI20BWSPeKmqfFLtDeU66VtGmaA/J8ynaI/7c+FeEN
6Aa4vhljo/498r0mz6tshZga8W26notxLp/ER57xWIrdjZVnmWw6v6x8Ld3/
Wo0SNRqJy8MKsTw5W4pdiuVgbbBRdHfSNY73iw3D+qq5RN/P8QtYH2xljLv+
3al/h+TZrPxY/EG8qbq12MXuX2XN6RbSXK69KZuLnZdvovsm8g1yrY+NkWMt
XVOsBHsbu07saDVuZO3EfB7vSB8L5R+uj4f0tXaMFzaUv0/8OnnGxDOLb0LX
RWwrsQewFnRXY3XU6B9znKaNGnfRVMHT/JE0A+R9Wa5ReEftm/B67JC45fgr
7AP3pfJ+6HpK7cHYXuPZUv1/8WexAv61+LNq9aJb4v7PbJf7B8Xudl3GX8r2
uB+L7Y1vhf8i+9T9hOi764/ytZJnq5wd2XL+G/hw7Sv1+Tltffh1PEcjfV3D
2ur7Snl+ph2qPYvN0L+NWD9svefMdp/FusQ7E38rzbK8pJ/R398ag87ybJGv
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
           "]], 
          Polygon3DBox[{{2335, 1366, 1554, 3095, 2218, 2219}, {2328, 1362, 
           1542, 3090, 2207, 2208}, {2503, 1547, 1251, 1252, 1548, 2504}, {
           2327, 1361, 1540, 3088, 2204, 2205}, {3069, 1378, 1286, 1285, 1596,
            2534}, {2416, 1473, 1293, 1294, 1474, 2417}, {2334, 1365, 1553, 
           3094, 2216, 2217}}]},
         Annotation[#, "Charting`Private`Tag$485511#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0l9oz2EUx/GzH/vNfvZHkkLb7GbsL8oVW3EjRmkuGWoXk5XNJa3kzlJu
SbI7trnCjJnSZnNLDftjjElNsuXG1VJez9Tv6fP+nHOec57n+X0r27pOdOZF
xIj1dE1E4k66D3Ssi9jAb89EXMAV+ODaiLNyf3MRZeoaxJbkhwojzok38VfV
HqOjYqn5KTyFu/Ebe3rlO8Sa9bouNshf5u/iYdyDX9JbabY5r8Wr7LvPB90j
Nic2g4eEDvC/+Ql8HOecZ1HuHf+AFvI78iPe80V4J/6AS3A1nsJV5p12nmlc
jdvwDK6Rn6W1tM76iDfaV4/n8CbcgD/hzXgX/oy7C7yZ2fO4Tr92/b7g3fJf
aV82Yqv6H2oW+Md0C7+idpLP4r1iS/w4X4CX3TG73mz8RGyan5S/hyfoTZpx
/4fi1/Avb34bv1V/iR+094hz9Ig9Un8+nc2cO/gkvkGP0kqxK7gR/0mz9Gm3
pxzXi/2Ub00e98q14DG50jSDVsiPm1PCv6LF6d50zCrCZ9SMYseJZe9x2P5c
Oi8+hLWMAe9Tpo9jxAu1I5YnjedUKi7qMYzz039En1l+8V2gKW/1M4lveD/W
Jvpt2pb5/43/AzXtWh4=
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzjkvw3Ecx/Fv66qjEptJIgxGR4wMpJMIbeJmYSPhcZAocVXrSBxteRg8
CCYmo93S4tXhnc/1+//+v/7NvdxuIiK2sJ2KyLdHzHVF1Pj9jogp+a0zYlY3
kI6o6490d7Z7ZPFhK9AF537tx/YHuSw/0nn7ie6Sr+HPmQM6bB9BzT6BU2eW
5GUEv0gz+l7/rfIVnOlfaYK+0D7bIc3jBz3yjvvP7VnfJumQfpq+0xndoDNN
8gXK3lFBDp+2Im3WF1DlnxqbviSX+BV3tPBFPMtf+LaP40rXbV9FK5+mk/o6
xvhRXOvX6Qba+DWa9J6bxn18it7iHyiJNCY=
       "]], 
      Line3DBox[{2157, 2463, 2987, 3064, 3229, 2156, 3029, 3155, 2313, 3033, 
       2449, 3156, 2314, 2857, 1180, 3157, 3032, 1186, 2464, 1077, 3158, 2929,
        1079, 2465, 3230, 660, 2466, 616, 2699, 3286, 889, 2467, 826, 3316, 
       2831, 891, 2468, 1136, 3359, 3011, 2991, 2992, 3354, 2315, 2158, 2456, 
       3159, 2316, 2984, 1184, 3160, 2930, 1142, 2700, 3074, 3161, 2932, 1081,
        2469, 3231, 665, 2471, 617, 2470, 3232, 666, 2472, 618, 746}], 
      Line3DBox[CompressedData["
1:eJwVzksug3EYhfG3oUIvpqbaYbsLZnUvEqNKLIC4tKi2abECmjA3E5ImDTaB
DRDCAkh0A34dPDnveU7y/77c1k55OxERG2iNRzynI54mIqbko7zJRDT5d72F
NprIZCMa/MD9h6J+op+7v3CGSe5b1vlXmdfXvXnlXpPX8ti2Kcdsq1wfZRS5
I9us7ydtK1wPy+jaDm0l27StrjeGbyGt12xv7trwDVSR4qv8r/sHBf1AP3V/
oIMs9yn3+ReZ05d878K9KC/lnq0iR20L3D3mUeB2bTP+acQ2x92ihLtUxIP8
B5zILa4=
       "]], 
      Line3DBox[{2176, 2390, 2840, 2391, 3321, 2175, 2969, 2392, 2841, 2393, 
       3319, 2177, 2860, 2394, 2842, 3192, 3075, 2178, 2971, 3076, 3349, 2970,
        2395, 3023, 2179, 3057, 3343, 2949, 3056, 2950, 2180, 3164, 2323, 
       2181, 3165, 3065, 3193, 2182, 2490, 2843, 2491, 3322, 2183, 2972, 2396,
        2844, 2397, 3320, 2184, 2861, 2398, 2845, 3194, 3077, 2185, 2974, 
       3078, 3350, 2973, 2399, 3024, 2186, 3061, 3344, 2951, 3060, 2952, 2187,
        3166, 2324, 2188, 3167, 2325, 2189}], 
      Line3DBox[{2203, 2514, 2513, 3243, 2202, 2326, 3168, 2201, 2954, 3046, 
       3367, 3048, 3047, 2200, 3027, 3028, 2850, 3351, 2980, 2979, 2199, 3080,
        3198, 2849, 2978, 2977, 2198, 3087, 3197, 2645, 2494, 2197, 3237, 
       2493, 2644, 2492, 2196, 3239, 2504, 2503, 3240, 2195, 2501, 2500, 3238,
        2194, 2953, 3043, 3366, 3045, 3044, 2193, 3025, 3026, 2848, 3323, 
       2863, 2862, 2192, 3079, 3196, 2847, 2976, 2975, 2191, 3089, 3195, 2846,
        2497, 2190, 3236, 2489, 2643, 2488, 2496}], Line3DBox[CompressedData["

1:eJwVzjtOQlEUBdBjh0qJQURAPsIcGAMVA0BAvo0ORBM/vYaGGGND4hBojQEk
QSejrlfs7H3Xu7l55f51+2ovIlrynIr4PYj4k46s0hHZ/YgnvtQXbM2O7Rn7
0Xdsx3J2187bPbm3T1hPF5z7cn4YcSN5XtMZdpl8c+eUzb155DxInG10gb/w
Dz1gX6xov7JPPWRbVrLf2Eo/sG92Zo/skj2UR7vMxkk7j6ThP26lwuu6ysYy
cafKFt7MJWeZsqY7Nf6u/wEqsSUm
       "]], 
      Line3DBox[{2225, 2516, 2653, 2515, 3244, 2223, 2529, 3207, 3106, 2222, 
       2528, 3206, 3104, 2221, 2527, 2702, 3309, 2791, 2790, 2220, 3096, 3205,
        2652, 2511, 2218, 3095, 3204, 2651, 2509, 2216, 3094, 3203, 2650, 
       2507, 2214, 3241, 2506, 2649, 2505, 3242, 2212, 2502, 2648, 3279, 3091,
        2211, 2523, 3202, 3100, 2210, 2522, 2851, 3326, 2873, 2872, 2209, 
       3098, 3201, 2701, 2520, 2207, 3090, 3200, 2647, 2498, 2204, 3088, 3199,
        2646, 2495, 2518}], 
      Line3DBox[{2227, 2517, 3066, 3245, 2226, 2519, 2707, 3289, 2341, 2666, 
       2531, 2708, 3290, 2342, 2667, 3109, 3177, 2532, 2343, 2668, 3110, 3178,
        2669, 2344, 2875, 3102, 3179, 2670, 2345, 2228, 3247, 2524, 2671, 
       3067, 3246, 2229, 2525, 3180, 2346, 2230, 2526, 2709, 3291, 2347, 2672,
        2535, 2710, 3292, 2348, 2673, 3112, 3181, 2536, 2349, 2674, 3113, 
       3182, 2538, 2350, 2537, 3108, 3183, 2675, 2351, 2231, 3248, 2530, 2676,
        2352, 2540}], 
      Line3DBox[{2232, 2542, 3068, 3253, 2543, 2400, 2545, 1376, 2544, 2401, 
       2547, 3254, 2353, 2546, 3081, 3184, 2549, 2354, 2548, 3111, 3185, 2677,
        2355, 2233, 3249, 2533, 2678, 2356, 2234, 3251, 2534, 3069, 3250, 
       2235, 3070, 3208, 2236, 2552, 2554, 3256, 2357, 2553, 2402, 2556, 3257,
        2358, 2555, 3082, 3186, 2558, 2359, 2557, 3083, 3187, 2560, 2360, 
       2559, 3258, 2539, 2679, 2361, 2237, 3252, 2541, 2362, 2562}], 
      Line3DBox[CompressedData["
1:eJwVzskuQ3EUx/FzQ0qva0EIYeUZ2GldfYU+QmvcsDFF+gIeQC2ML6A2Egvi
mt6DpSGxrGV9uvjmN5zzH+Ya2/WtJCLqeByOaJYjBtOI3kjEcRYxwF9jRT9E
53W/+ORPUUIHX1i1k9J38zP6jXOUUXHfLTKzHRzoFu1n9EHu8of9PVr4x53u
j6/iSd6VA0d4ltf04/YTuY0xvur+df0kv6A7wQU/gRtsmE3TD/0l/cEVprDk
bI5Rsz3M9jv7M7SQN/kWn9MX79/rEnlZfpX35Rr/xv8DQ04plA==
       "]], 
      Line3DBox[CompressedData["
1:eJwVzkkuA2AYxvG3C0mpKWkikSCkdqzZcgWb7i2rg6Koxj1wClPtiCHmsb0B
a7T0An4W/zzTmy/fxGJpoZiIiCyayYhad8QW9nojGvJ0T8QUruQ3eYzfxijO
da+6qvsReZPu6l50iVREh9/QDdvW6bzuhH+21+kPPtxUbEP8Gm3TYzy5mbW1
0ZJXbWm6Qh9tl/oyv4wd/kE3ac/gQr6XB/kaBnCmu9P181X04VR3qwv/+uVL
3krpi3ROd8Tf2A/pN97dFGxJPk+/6AGu3cz8/xOf8pKti+boPh3HH6JfMu8=

       "]], Line3DBox[CompressedData["
1:eJwVzEcuxGEYB+BXi+4OlhYyQyRKgomFRAnJOIHBljMoW+U2WIg2o4zuBNoM
oywtZsXzXzx52+/7OnMr2eWaiJjnpynioSWisTXiUR3lnip3VNoivmVu9A0y
t+oI10yar9QPmS+ZS32RYf7sZt1n+HTbU/fZpatdPtlTceuR3WEi+cuc0m+z
YR7i3a7ZmwX5JRZZt59TD8hSlil6U6fPUc+gzAW/nCf/uJfkCvpa9zN1gDzj
5lO1LPMmc6w/oZ+S3ZF6yKvblOw0feaCWwcv9ml1izH7Z3O3fpM1cy9Pdnlz
Wr9Kigz/+Bg9Pw==
       "]], Line3DBox[CompressedData["
1:eJwV0DkyhFEUxfEr0q3bChDYgZKRoIxlbMoKBLSpexWGgIDFCFBIlSExz1Nm
nqdO/AT/Oveec9736nuVA/m+XFFEZFFIRHSXREyjC9vpiF/eeCoijxym+P10
DRWlEQ06Pzop+xjS6NSp5W+hYL7Bt84VLZFf0w7cyS/pIu+Cfumc0XPMy9rp
KU7wKevVK3JnvayNN5uM+OBX2+eQ4b3bN8yt5km0YNP+xh92fhQjmOCv0FWU
+2arzqvOoD2LITTr1PDX/9/BfIwXnUOalB/RJtzKD/7fjLdPn3X2aMJeVRzR
aN7Fgn2HPskz5nBvnbMNvBn/8shvsZfxl+VLeMA9enT+AIm2QWs=
       "]], 
      Line3DBox[CompressedData["
1:eJwVzr0ug2EYBuDH5q+0X0tiNDQxGIuBsbRNxGASNgfQNjEYOjgEpNjZ+qOi
cQh+6wwkEovBAejWxGW48tzv/bzfl3fxsLZbHYuIPR4mIu6nIvqssco8Ff1w
OmJOfmfACWX9j7mUitixb8uJ7sjM6z7MjPOXeWBfpD4ekdbl7K/0lzzzwo19
hf7/O1jRZdnQXZCT7/QlvicjOvTkBf/q2d3SYEv3634iv/HKMZv6xN1TeVau
m8vOQ3PG+dPc9902Ne9M6bL25/ozHnni2r5M175DQZdmXdckI7f0Rbpy2ztH
/AGS9S5Y
       "]], Line3DBox[CompressedData["
1:eJwV0EkuRHEUxeFroopiZi4loShUIkIkjArB1AIEC2ADlL4tO2AbojfEXN8P
2IAmGPre4Jdzzzk3N//3spPTo1MVETGGjuqIPfRnImaqIurNs3SXr0tFXKYj
9mVFviTPmudoqjZiXHalb5CVsFkTkce1rEDL6JTf8GfmLnM3bvltft6dRn6B
Dro1gDvdm+5A/olFXRNdol/0EOf6e3tH5m8s63J0hf7QD30PHuwc80Puruqa
zWs07e0Tskd9S/I92LLfiidZW/INyfvkeTzLLvhecx9e+B1+3a12foOOuDeM
V9277kT+m/wTXYGW6R89RaW9fzQLNiY=
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzj0vQ3EUx/Ej0TLoVoOwWMpaSd+Bh6UNEXeRSmgiqUQwSCwST0OjnYiZ
iQmjxmAUE4mmCa/AYBSbBJ87fPM953fuOf87Wtuc3+iJiATt3ohMf8RhJiLL
Rzw3EPGdjfhQ7/ZFfKGpTsxbqc0X1NOYxBQWZWWu4NX3uVxElzv4Q8gHZef2
q/oLXuId/Ni91K+qr7jODfzKh/3HLUawou9wEfeYwJqsxNf2KnzDW7JZddON
O/2Qt9u8LT+WPZkt40G/nt5F3ryl31Pv4wCP+mf5ifqFz+yepu/zp9mbbNzt
d57hMRTwD+dCLf8=
       "]], Line3DBox[CompressedData["
1:eJwVz71OAlEUReFj4l+hUllqgoWJYKVGWp7ADBa0xMFGCg0PoAXGTjvfg9YA
UhkDDdpKraCJ2ptY8E2xss7eZ+bOnXx6cXw+FxEJHuYjLpcipgsRo8WIT76S
/1civsx/ulvOLUfccVW/Zu57pocz8+5qxKN55KwTuSCnXMcp3u1yugl/INFV
sK37ln/xk+H9lvM3fLONTaRyw27f3MEBGrouH+IIJTR1T5yghp5c4UF2Bvpy
ndf9Q4uf5Wu+QT67l/xiVza/8hbf2w31e+Y3XdGdx1zL/hE7mAG69i2d
       "]], 
      Line3DBox[{1209, 1514, 1956, 2056, 2055, 3352, 2057, 1786, 1787, 1526, 
       1789, 3230, 1788, 2064, 2042, 2043, 2041, 3346, 1428, 1991, 1989, 3338,
        1990, 1239, 1348, 3164, 1250, 1543, 3238, 1544, 1706, 3279, 1545, 
       1897, 1546, 3171, 1712, 1567, 1928, 1568, 3179, 1724, 1592, 3249, 1593,
        1733, 1618, 3255, 1619, 1292, 1646, 3265, 1647, 1648, 1482, 3227, 
       1668, 1935, 1934, 1936, 1827, 3302, 1828, 1683, 1830, 1829, 2097, 3356,
        2095, 2096, 1977, 1686, 1322}], 
      Line3DBox[{1210, 2035, 2099, 3358, 2037, 2038, 2039, 2040, 1743, 1924, 
       3286, 1923, 1925, 1904, 1905, 1873, 3317, 1429, 1994, 1992, 3339, 2122,
        1993, 1240, 1349, 3165, 1251, 1547, 3240, 1549, 1707, 1550, 3242, 
       1552, 3172, 1713, 1569, 3247, 1571, 1725, 1594, 3251, 1596, 1285, 1383,
        3189, 1293, 1473, 3224, 2074, 2076, 2075, 2077, 1813, 3299, 1814, 
       1670, 1818, 1817, 1854, 1831, 3303, 1832, 1685, 1942, 1941, 1739, 1688,
        3276, 1978, 1690, 1323}], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/H3ucMNd0ZGnSuyG0wUO3XL3RHDSSandJ1isDFQrEoUCxNl
POVrYLjtyELnH5CyWT0Mz56v9+vzs1DbKNVTEVFGkomo90fs9Ubs8j6XchG/
fRE/cj4bMYsjeYGPuWK9Kj/a/4AEi7o53TzezQP5iC5/IKXrwaDuwvma7pJX
OK0f0l+Zt83X3PH2pPztzlH5DmNYNb/yFBJMY103wzfOlfmWN///J+fc0TIf
8j039QfymrUn84m5IT/LbX4zN3kLw/61hHF/W+aOPSP8wkU+tWfCXV/OdHXn
8idnrJ3JO/gDhSAvLw==
       "]], Line3DBox[CompressedData["
1:eJwNzjsvRFEYheElcYtLotVRCBOXTk+iUUlGM6IRiWMkMgr/QVyioNH5D0Tr
MigoJJLR07okjEqFp3jzrm99Z++zB5c3yrWWJHOotyZdncl2W9LNO/zTnnz0
JE35Vz7gRz7kBf1tR3KNWd8P9SY3csM9K+ZRc8GrqOLVrk/3zm8o6+YxrPs0
N/GFb+e33D3iP2cooTCv203JdUyjppvhE2+p8Clv6hblc7ngS/OFfC9XcWVe
437dLt+Z93gfR+7/MzfsBrzriUu6Y7sH/aT8rJuwe+ElHscY/gF6KS8k
       "]], 
      Line3DBox[{1218, 1522, 1868, 1921, 1920, 3325, 1922, 1791, 1792, 1528, 
       1794, 3231, 1793, 1530, 2069, 2070, 2068, 3368, 2140, 2139, 1997, 1995,
        3340, 1996, 1245, 1352, 3166, 1256, 1360, 3168, 1267, 3207, 1578, 
       1899, 1579, 3175, 1717, 1580, 1603, 1581, 3183, 1730, 1605, 1626, 3258,
        1606, 1734, 1628, 3259, 1629, 1296, 1656, 3267, 1657, 1658, 1484, 
       3228, 1676, 1938, 1937, 1939, 1834, 3304, 1835, 1693, 1837, 1836, 2098,
        3357, 1952, 1953, 1702, 1696, 1328}], 
      Line3DBox[{1219, 1523, 1957, 3330, 1524, 2065, 2066, 2067, 1529, 1796, 
       3232, 1795, 1926, 1906, 1907, 1876, 3318, 1430, 1877, 1534, 3235, 2123,
        1535, 1246, 1353, 3167, 1257, 1556, 3243, 1557, 1708, 1558, 3244, 
       1559, 3176, 1718, 1582, 3248, 1583, 1731, 1607, 3252, 1608, 1290, 1386,
        3191, 1297, 1479, 3226, 1480, 1659, 1821, 3300, 1822, 1678, 1824, 
       1823, 1855, 1838, 3305, 1839, 1695, 1945, 1944, 1740, 1697, 3278, 1979,
        1698, 1703}], 
      Line3DBox[{1319, 1405, 1769, 1699, 2085, 2084, 3355, 1313, 1399, 3268, 
       1661, 1306, 1392, 1933, 1660, 1812, 1811, 1298, 1387, 1760, 1642, 3311,
        1806, 1805, 1291, 1382, 3221, 1630, 1459, 1282, 1375, 3253, 1610, 
       1609, 1275, 1368, 3245, 1560, 1268, 3280, 1361, 1540, 3199, 1258, 1354,
        3236, 1536, 1247, 1347, 1908, 3321, 1435, 1236, 1344, 1998, 1878, 
       3331, 1961, 1960, 1227, 1339, 1872, 3219, 1871, 1427, 1220, 1332, 3229,
        1525, 1205, 3151, 1329, 1741, 1505, 1704}], Line3DBox[CompressedData["

1:eJwNzz9LQgEUhvET/isonCMQsqUvUBY0BC2Bm4laU/QBipYQBPELNAfl0upU
ETU2NQhBNQi1eW1LaAiiIYd+w8N53+ece7l38eCocjgVEVUsZyLG2YhPXOQi
Bvq5GXMRRbmJwnRE2/50NmJBP8aVm5ybvnwt32DkJsGGnLh9sMvLW3jn3/DF
r+u3djNmytxH2a5nTtJu3ezK99w8frhXrsJl9Y485sr6iXdkuBY35BJ9iD38
cl03A/5Ff0Ydad99xvfkJ7s1/1fCpftV88/ukd/RV+RtbhMN3PFLnq/LNXzY
d/DtG0bmP4W2MMo=
       "]], Line3DBox[CompressedData["
1:eJwVzS1IQ3EYhfFXmE5E05pYFteWFkQEYWVqcksuKTKDHwOTYWXVoMYVi9pE
28Rospmmd6AM8attxYFJwZ/h4fyfc+7Lza7XV3ZHIqKM3GjEYCyij4V0RMLz
cgmLKOHYdoTDyYgZ+x52+AHPeG9ji3/xW++imys86150T3KWt20TMiWv9Wty
2XYh0/rflG/1q/xGn8e3rqsr6y75NJq8r990U8MGzu0N/av+nb+hihP9vj7R
J/wRHWSnIlq2+fGIe1uGz/Ef2x2vuCnwOv+Up/Ls/97/e7YHWeBN29D7Q/4B
aLIyBw==
       "]], 
      Line3DBox[{1324, 1406, 3275, 1689, 1315, 1401, 1687, 1864, 3274, 1863, 
       1309, 1395, 1767, 1671, 1816, 3271, 1815, 1302, 1389, 1763, 1649, 3266,
        1474, 1294, 1384, 3209, 1286, 1378, 3250, 1595, 1278, 1371, 3246, 
       1570, 1271, 3282, 1364, 3241, 1551, 1262, 1356, 3239, 1548, 1252, 1350,
        3193, 1241, 1345, 2045, 3360, 2109, 2108, 1231, 1341, 3353, 2071, 
       1532, 1798, 1797, 1223, 1335, 3316, 1870, 1869, 1422, 1212, 1330, 3345,
        2036, 1211}], Line3DBox[CompressedData["
1:eJwVzrErxHEcxvHn5Bx14iYDkbrVhDIZLKYbnJTBhEVxV2KxGCy3KvkLcImZ
W+xGZVBmShm4iSy8DO8+n+f9fPr9vpPrzXqjkKSGqWJyiPO+5AzH5aQqH+Cm
lHQwMJjcmuPcHt7ctdB1O8aPYoRv4IXfxaeuwg9jiN/CKbep69hL2ECL++1N
ts01uar/lh/lFbkiH9k/uNr/O+093Ku8KO/7/g9X4J65Be6JW0XRu6/NKzzo
5nXL9hP3dbONC9zr5nQT7mf7kxl8yXf8kttp+467d/PSf/4AoWcouA==
       "]], 
      Line3DBox[CompressedData["
1:eJwVzj0ohXEYhvH7hOMdWEyySDmr/ZCBsipCGXwkVialZDuLyShFyW5CsZzF
JJMy0GFRzuRrUQzK7wxXz31fz9P/fQdWNqbXS0mmMNSRfJaTDxx1Jg390Cx1
JxV5G7t2e11Jv7yJM/vC/lY+ly/QdPOKUfnF7bVdjzyBZ/4J+/yaeWVX4FJf
NWe5GURucAtmXa/gtz255+Za7+k1+Yub1Le83cbtcE1uWV/CIn6449Z7/KP+
gHmU/fcBfyrf2Y0UyTBO3FfNP7sbvs9dVe7l6vqgPi6P4Z2v4du338x/ZzEu
uw==
       "]], Line3DBox[CompressedData["
1:eJwVzyFIQ2EUhuEzmLrhTBqM24LVYBhMZGCwigbXBAWrC6LgGGtrC7KoaWlN
wabFYjIanOFyZ5tJHYLBID4LH99533N//vuXDhu7x5mI2JHVmYjJbMSXbM5F
JLhXiFgzr5hbUspFXNlf8EV8Jqe4i5fNDTnB3/jRvOXsjYy4Ny7V6/jebl7n
9R1/pPfsrnWOz+iE39cP/Ib8ZiNeuTp3ixelgyf8Nnfu3EC3uTH3jsdyIH2+
ySf8CKfT90l5IeLSruZdz3ZLuIb/7J5w3ZkqLth/Tv+FG7o35V90xXcd/sf8
of8B124wsQ==
       "]]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
Tr+s+yTBdyCzsWEn5jvRpN9cS/4/fnO7SL+5x3JnbTB/EY876ULwF/QnpdoW
85eI5VJzOB/ezm9bReRD1ChjOIvzYfC6Dwdw/vzUncxG5E8keDmCB+dPKxbR
LMyLq6/skCF4MdrnePQU5sU15ZJsmD++lLO4SvBHWH20n4H5Y2iT2ucwm35U
v8HcSsyWyPvZyyfn5YdAJd5eCPPclX/kIgmeC5TP6zIxzx3if9SJ+wPDfOze
KtJN6Bz7MVbcH5AM0C3HvHs+ME2F4N3IpFE5EPPu154UE9w3eJic+Lj+wRdk
y0Tvxn0Dw9H2witvKcj81r34ZwEUeGJbYBRK4N6s4B/HVspTkedjR34b4rxQ
2VlU5dqG4fTGXy3KdVR07aJGnG9kHcx0rdVkTxyFOdaPa8Mrqej7/ac7m+tz
4D7Fyt+uiMj3Bp/pcexUVDN6S1xRZQDMnZ4fHdxIBTuyH+VF9qNmyH6UzfLl
m3TlBhGvyPr5iu4O4Ah/FMqQHILd5bRbET2DaNMlmQ/PM5sh2IUuH/ZtCMrJ
PpIx2UeqJ/tINK31xjEfhlBkbWveLoVk6FN+ekruxgjY/Yk6ifsen39w2HGu
bob4b1tLcN8jTv3qZdz3SD0fe8Z+Qw2Uvtiah/set0wr//Y93NL7Hu3eVgRu
got/+x61g889BscpYBAa450pOIByiiZSbl6iwpLjrAGd+QMw59Oz6ZV2B5Lr
ee0xVT4Emqn2P/NPDMLBmnesKRubUZ3z4tf08GFQuJArO00fBMek5VPR+Ulo
Zj+/Nr/EKDR/1/3bp7I6/bHzg28SSNozEnGfam5fvgvuU03mU4MTkt8Bi1p/
P+5T/av/g/7T/7lD+tbp/cu37ioZN/tXvJJ7qeFK706UUq6q6CPzEX6K3slO
LqWD8qMozYjYDjQc8NU5/2QueB3UvZ0swYB4b5G/311U/5cX8d2RtXWsH/7u
IcE9zXif7LuypZjYJyioN+oI3ierq98Z4e8yWx19U1ohGQVdl/z7Xf5bP83z
v/fTNrDH3MTfvf9CfjXx3dFwh7ss/u6z2dn7cJ9N1UefI14wGSVUyv/tsw3q
3nuN+2ya9CfUK+Y5aLFn9Drus12p+sfHLcryf/rlPSXjrv/y0Ys41N/xdWUz
NMkxCYd25yGWXcLPHIg8GZzFzbN8tBFMt75VvrIkCwnRvzM+uBB5cS5UqEiN
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
HIj0D8iWYBz4h5/5hPAz7xF+5v8Deu49aQ==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{639.16015625, Automatic},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-3, 3}, {-2, 2}, {-0.9999998001849767, 0.9999412949754951}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.0145980885585755`, -2.811039999502133, 1.5870238939260914`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.75072792414992*^9},
 CellLabel->
  "Out[231]=",ExpressionUUID->"b33d5b1b-8450-4d28-b17b-f62144204e4d"]
}, Open  ]]
},
WindowSize->{808, 755},
WindowMargins->{{Automatic, 306}, {Automatic, 0}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1704, 43, 136, "Input",ExpressionUUID->"7f76a40b-82db-47bd-8bbe-6c88509c4e08"],
Cell[2287, 67, 13042, 217, 233, "Output",ExpressionUUID->"4c0d43ee-cb15-4655-9499-5c5935d7e0f9"]
}, Open  ]],
Cell[15344, 287, 822, 25, 73, "Input",ExpressionUUID->"b9b8e034-5001-4cce-b600-358e38d33c09"],
Cell[CellGroupData[{
Cell[16191, 316, 996, 27, 94, "Input",ExpressionUUID->"ab375d51-7517-4815-b1c7-fc1a1ff0d101"],
Cell[17190, 345, 2019, 42, 329, "Output",ExpressionUUID->"ff2df862-dbc8-4b2c-8326-6d257b0735b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19246, 392, 241, 5, 30, "Input",ExpressionUUID->"7bfb1be5-5732-4e1f-98ea-4e5d3c43c69a"],
Cell[19490, 399, 5600, 99, 238, "Output",ExpressionUUID->"cc23157e-8e3e-4188-90bd-6cf5b862059e"]
}, Open  ]],
Cell[25105, 501, 159, 3, 30, "Input",ExpressionUUID->"b33795d1-9f89-48e4-81ae-66962c954509"],
Cell[25267, 506, 129, 3, 30, "Input",ExpressionUUID->"d1fc7f6b-3f13-4673-bb25-3fc554985a10"],
Cell[CellGroupData[{
Cell[25421, 513, 833, 22, 73, "Input",ExpressionUUID->"5d8041ad-f608-457c-b91c-d510a65d840a"],
Cell[26257, 537, 1757, 37, 337, "Output",ExpressionUUID->"51859679-ddcc-4943-902e-f0480eefee8a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28051, 579, 152, 3, 30, InheritFromParent,ExpressionUUID->"ed24f7c0-fc60-4727-abad-941e88251cca"],
Cell[28206, 584, 705, 12, 42, "Message",ExpressionUUID->"bf8b990d-7e0c-41dc-995c-3bb8da718a68"],
Cell[28914, 598, 704, 12, 42, "Message",ExpressionUUID->"0c2bd802-5f2d-4956-b324-3192bff95fad"],
Cell[29621, 612, 707, 12, 42, "Message",ExpressionUUID->"f5895f8e-2722-47ca-89cc-ff8655bb2147"],
Cell[30331, 626, 418, 8, 24, "Message",ExpressionUUID->"fc84ceeb-06d2-4264-af85-fdfb9533b169"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30786, 639, 290, 6, 30, "Input",ExpressionUUID->"4c9b55e5-8e50-449b-8d72-c0c99a31a8be"],
Cell[31079, 647, 239, 5, 34, "Output",ExpressionUUID->"b35694d4-744b-4814-bded-92962749b9c0"]
}, Open  ]],
Cell[31333, 655, 690, 20, 73, "Input",ExpressionUUID->"44296d42-7756-4970-835d-adf29c456f06"],
Cell[CellGroupData[{
Cell[32048, 679, 213, 3, 30, "Input",ExpressionUUID->"211e4b59-3c82-419c-8b8d-b4120edb7af1"],
Cell[32264, 684, 3445, 65, 234, "Output",ExpressionUUID->"c5dd2e38-158e-4e96-921b-748e14db5805"]
}, Open  ]],
Cell[35724, 752, 203, 4, 30, "Input",ExpressionUUID->"d1eebb71-0e45-4e52-8ad3-2e6bd5f6c29c"],
Cell[CellGroupData[{
Cell[35952, 760, 276, 5, 30, "Input",ExpressionUUID->"776022c6-2e96-4f0a-b8f2-05c5d87d48ad"],
Cell[36231, 767, 241, 3, 34, "Output",ExpressionUUID->"d11992e9-42be-4f76-b4dc-638181626620"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36509, 775, 382, 9, 30, "Input",ExpressionUUID->"26b681cf-61c1-441a-a5b6-dfb5ba2ecf2f"],
Cell[36894, 786, 3437, 95, 240, "Output",ExpressionUUID->"5f476d61-bcaf-4cab-9908-af484bae8747"]
}, Open  ]],
Cell[40346, 884, 158, 3, 30, "Input",ExpressionUUID->"0f44b4ee-3ae1-43f7-8e41-163ed22ddeb0"],
Cell[CellGroupData[{
Cell[40529, 891, 297, 7, 30, "Input",ExpressionUUID->"4d08c26a-c6e8-4372-897b-874cc92fbf90"],
Cell[40829, 900, 2789, 77, 246, "Output",ExpressionUUID->"70885a50-22d4-4d34-a78b-6094a274a397"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43655, 982, 296, 7, 30, "Input",ExpressionUUID->"9b7213eb-4e3c-468f-8ac7-9e006dc598e3"],
Cell[43954, 991, 1336, 36, 251, "Output",ExpressionUUID->"8b98e887-9d0f-45de-a604-81f0d5803aca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45327, 1032, 818, 22, 52, "Input",ExpressionUUID->"7da1960c-8d43-4a3b-9d23-057f753409a5"],
Cell[46148, 1056, 62683, 1054, 245, "Output",ExpressionUUID->"514f11d7-bc8b-40bb-8808-daf09822ad0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108868, 2115, 271, 7, 30, "Input",ExpressionUUID->"63227b07-3424-459b-a718-69017aaada0d"],
Cell[109142, 2124, 175, 4, 50, "Output",ExpressionUUID->"77afef20-ca6d-4e6c-a29e-71add88cefee"]
}, Open  ]],
Cell[109332, 2131, 156, 3, 30, "Input",ExpressionUUID->"1c414eea-a33d-4f75-9843-dc581e3a1870"],
Cell[CellGroupData[{
Cell[109513, 2138, 423, 12, 30, "Input",ExpressionUUID->"6fc51645-95dd-4123-b9cf-e1763ca79cec"],
Cell[109939, 2152, 773, 25, 68, "Output",ExpressionUUID->"09092d75-b866-4dec-be25-fb341004801f"]
}, Open  ]],
Cell[110727, 2180, 381, 9, 73, "Input",ExpressionUUID->"ba467292-6c13-4c91-9997-41da9cc72453"],
Cell[111111, 2191, 404, 8, 73, "Input",ExpressionUUID->"943bb5ca-39d5-4c22-a729-465d25217622"],
Cell[111518, 2201, 598, 18, 77, InheritFromParent,ExpressionUUID->"45767c60-a048-4c46-9649-06b884ccdb0c"],
Cell[CellGroupData[{
Cell[112141, 2223, 288, 6, 30, "Input",ExpressionUUID->"f3821560-4f24-44d2-a0e3-286514bf3cc2"],
Cell[112432, 2231, 253, 8, 55, "Output",ExpressionUUID->"ad63837f-3291-4fe5-b4a0-bb59599a3130"]
}, Open  ]],
Cell[112700, 2242, 301, 7, 30, "Input",ExpressionUUID->"b0d8b970-fc3a-48a4-b818-3fcbdf697dad"],
Cell[CellGroupData[{
Cell[113026, 2253, 590, 18, 58, InheritFromParent,ExpressionUUID->"4e2b5725-2471-4111-b140-028e011fe7f8"],
Cell[113619, 2273, 551, 15, 73, "Output",ExpressionUUID->"814e509c-9cb3-4214-b0a8-bbda1ecd952f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114207, 2293, 418286, 7693, 118, "WolframAlphaShortInput",ExpressionUUID->"3235b529-b8f5-4f30-a270-d728b6be08f6"],
Cell[532496, 9988, 282, 9, 54, "Output",ExpressionUUID->"81511f07-d6dd-4ad3-9ea9-61f0d3176868"]
}, Open  ]],
Cell[532793, 10000, 532, 16, 58, InheritFromParent,ExpressionUUID->"78c1afc0-fbca-4804-aad3-11a430f5c3a7"],
Cell[CellGroupData[{
Cell[533350, 10020, 569, 17, 77, "Input",ExpressionUUID->"84992e92-9ffd-4e5e-a73a-983f8bf34c18"],
Cell[533922, 10039, 566, 19, 76, "Output",ExpressionUUID->"c8ed4fe5-24ff-421c-ab59-6361e563de34"]
}, Open  ]],
Cell[534503, 10061, 156, 3, 30, "Input",ExpressionUUID->"02091792-4601-42da-a34e-cc9d9d12e073"],
Cell[CellGroupData[{
Cell[534684, 10068, 18771, 456, 65, "WolframAlphaShortInput",ExpressionUUID->"b5c53e76-4cf9-4aff-9859-6df03f36fee2"],
Cell[553458, 10526, 581, 19, 73, "Output",ExpressionUUID->"2d07052e-f1bb-4539-b147-a4409f8fbed2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554076, 10550, 515, 17, 64, "Input",ExpressionUUID->"58371c7a-6010-421c-814e-170ce34f4b02"],
Cell[554594, 10569, 336, 11, 54, "Output",ExpressionUUID->"aa8dac4f-264e-4115-b13b-9903df299a59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554967, 10585, 445, 13, 52, "Input",ExpressionUUID->"5a821b43-eccf-4b31-b696-1c92cb7f6ab0"],
Cell[555415, 10600, 450, 15, 64, "Output",ExpressionUUID->"1f6db344-6e85-48ee-9a07-3cff4f40d942"]
}, Open  ]],
Cell[555880, 10618, 227, 5, 30, "Input",ExpressionUUID->"0d5efeb9-aab6-4efb-8be6-e1b15bf917e8"],
Cell[CellGroupData[{
Cell[556132, 10627, 503, 14, 45, InheritFromParent,ExpressionUUID->"a85ad829-1995-49af-b5c4-66494394ce36"],
Cell[556638, 10643, 341, 9, 34, "Output",ExpressionUUID->"03013a8a-e595-4a33-99a4-78132032be69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[557016, 10657, 475, 12, 45, "Input",ExpressionUUID->"9907c963-aecb-4218-bd7e-fa6d1b616ddc"],
Cell[557494, 10671, 588, 13, 34, "Output",ExpressionUUID->"94895fdc-ae3b-4ba8-be6e-b132281b4729"]
}, Open  ]],
Cell[CellGroupData[{
Cell[558119, 10689, 389, 10, 45, "Input",ExpressionUUID->"e37e2d21-650f-4812-ba04-0806435366c0"],
Cell[558511, 10701, 419, 8, 34, "Output",ExpressionUUID->"8ec69363-9119-4595-a876-c9d8f905e5d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[558967, 10714, 541, 10, 52, InheritFromParent,ExpressionUUID->"f91feb0c-4f73-4644-8fc8-738b34c8d3ff"],
Cell[559511, 10726, 819, 19, 34, "Output",ExpressionUUID->"8645b847-7cc0-49db-bd37-ec7277d0c9de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[560367, 10750, 357, 10, 30, "Input",ExpressionUUID->"abc9fafa-ba8c-4b19-b951-dd5e11c649ea"],
Cell[560727, 10762, 344, 8, 34, "Output",ExpressionUUID->"61c5964f-0bc1-4b53-971a-5f68a1f00dc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[561108, 10775, 497, 11, 52, "Input",ExpressionUUID->"4b04d27a-fb59-4d38-bf15-e77ff44cbbc1"],
Cell[561608, 10788, 472, 11, 34, "Output",ExpressionUUID->"70d7a1d9-ab90-4c69-8820-f40d2bc24309"]
}, Open  ]],
Cell[CellGroupData[{
Cell[562117, 10804, 248, 6, 47, "Input",ExpressionUUID->"5c41f0c0-b510-4a88-82cf-c7b674d7a415"],
Cell[562368, 10812, 397, 13, 58, "Output",ExpressionUUID->"90ce51b3-146e-4c08-a555-a49b49371055"]
}, Open  ]],
Cell[CellGroupData[{
Cell[562802, 10830, 624, 20, 68, "Input",ExpressionUUID->"97f4199e-93d7-4677-8140-380832b34b6d"],
Cell[563429, 10852, 214, 6, 52, "Output",ExpressionUUID->"b26bf798-fc4d-45b3-bd99-3d9f4b281b2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[563680, 10863, 335, 9, 50, "Input",ExpressionUUID->"4a5065b7-be5f-4cca-be98-e4a7c3ab3dae"],
Cell[564018, 10874, 248, 6, 34, "Output",ExpressionUUID->"4d00dffb-ed44-4a9b-9045-8059790b8790"]
}, Open  ]],
Cell[564281, 10883, 551, 18, 68, InheritFromParent,ExpressionUUID->"b8f823c1-8601-4cc9-9b30-ab34c5710c10"],
Cell[CellGroupData[{
Cell[564857, 10905, 399, 12, 40, "Input",ExpressionUUID->"0635c583-7524-43c1-9b0c-5cd706a88e55"],
Cell[565259, 10919, 381, 11, 38, "Output",ExpressionUUID->"434af17a-630b-4a9f-ac86-d94c64cdf4ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[565677, 10935, 417, 13, 30, "Input",ExpressionUUID->"4a00ae03-1f1a-424e-96c3-864f06d5fc47"],
Cell[566097, 10950, 189189, 3126, 524, "Output",ExpressionUUID->"b33d5b1b-8450-4d28-b17b-f62144204e4d"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

